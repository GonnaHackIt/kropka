
Kropka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800609c  0800609c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800609c  0800609c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800609c  0800609c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080060a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000068  0800610c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800610c  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e153  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002319  00000000  00000000  0002e22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  00030548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b23  00000000  00000000  000313e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287aa  00000000  00000000  00031f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113df  00000000  00000000  0005a6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa6ed  00000000  00000000  0006ba8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004764  00000000  00000000  0016617c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f24 	.word	0x08005f24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005f24 	.word	0x08005f24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000278:	e002      	b.n	8000280 <Delay+0x10>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3b01      	subs	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1f9      	bne.n	800027a <Delay+0xa>
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <lcd_delay>:
void lcd_delay(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	Delay(200);
 8000298:	20c8      	movs	r0, #200	; 0xc8
 800029a:	f7ff ffe9 	bl	8000270 <Delay>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80002ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b6:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80002b8:	4b5e      	ldr	r3, [pc, #376]	; (8000434 <lcd_cmd+0x190>)
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80002be:	4b5e      	ldr	r3, [pc, #376]	; (8000438 <lcd_cmd+0x194>)
 80002c0:	2220      	movs	r2, #32
 80002c2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80002c4:	4b5c      	ldr	r3, [pc, #368]	; (8000438 <lcd_cmd+0x194>)
 80002c6:	2210      	movs	r2, #16
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80002ca:	4b5b      	ldr	r3, [pc, #364]	; (8000438 <lcd_cmd+0x194>)
 80002cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002d0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80002d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002da:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80002dc:	f7ff ffda 	bl	8000294 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80002e0:	4b54      	ldr	r3, [pc, #336]	; (8000434 <lcd_cmd+0x190>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a53      	ldr	r2, [pc, #332]	; (8000434 <lcd_cmd+0x190>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 0310 	and.w	r3, r3, #16
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d003      	beq.n	80002fe <lcd_cmd+0x5a>
 80002f6:	4b50      	ldr	r3, [pc, #320]	; (8000438 <lcd_cmd+0x194>)
 80002f8:	2220      	movs	r2, #32
 80002fa:	619a      	str	r2, [r3, #24]
 80002fc:	e003      	b.n	8000306 <lcd_cmd+0x62>
 80002fe:	4b4e      	ldr	r3, [pc, #312]	; (8000438 <lcd_cmd+0x194>)
 8000300:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000304:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	2b00      	cmp	r3, #0
 800030e:	d003      	beq.n	8000318 <lcd_cmd+0x74>
 8000310:	4b49      	ldr	r3, [pc, #292]	; (8000438 <lcd_cmd+0x194>)
 8000312:	2210      	movs	r2, #16
 8000314:	619a      	str	r2, [r3, #24]
 8000316:	e003      	b.n	8000320 <lcd_cmd+0x7c>
 8000318:	4b47      	ldr	r3, [pc, #284]	; (8000438 <lcd_cmd+0x194>)
 800031a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800031e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000326:	2b00      	cmp	r3, #0
 8000328:	d004      	beq.n	8000334 <lcd_cmd+0x90>
 800032a:	4b43      	ldr	r3, [pc, #268]	; (8000438 <lcd_cmd+0x194>)
 800032c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000330:	619a      	str	r2, [r3, #24]
 8000332:	e003      	b.n	800033c <lcd_cmd+0x98>
 8000334:	4b40      	ldr	r3, [pc, #256]	; (8000438 <lcd_cmd+0x194>)
 8000336:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800033a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800033c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000340:	2b00      	cmp	r3, #0
 8000342:	da05      	bge.n	8000350 <lcd_cmd+0xac>
 8000344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800034c:	619a      	str	r2, [r3, #24]
 800034e:	e004      	b.n	800035a <lcd_cmd+0xb6>
 8000350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000358:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800035a:	f7ff ff9b 	bl	8000294 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800035e:	4b35      	ldr	r3, [pc, #212]	; (8000434 <lcd_cmd+0x190>)
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000364:	4b34      	ldr	r3, [pc, #208]	; (8000438 <lcd_cmd+0x194>)
 8000366:	2220      	movs	r2, #32
 8000368:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800036a:	4b33      	ldr	r3, [pc, #204]	; (8000438 <lcd_cmd+0x194>)
 800036c:	2210      	movs	r2, #16
 800036e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000370:	4b31      	ldr	r3, [pc, #196]	; (8000438 <lcd_cmd+0x194>)
 8000372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000380:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000382:	f7ff ff87 	bl	8000294 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000386:	4b2b      	ldr	r3, [pc, #172]	; (8000434 <lcd_cmd+0x190>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a2a      	ldr	r2, [pc, #168]	; (8000434 <lcd_cmd+0x190>)
 800038c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000390:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <lcd_cmd+0x100>
 800039c:	4b26      	ldr	r3, [pc, #152]	; (8000438 <lcd_cmd+0x194>)
 800039e:	2220      	movs	r2, #32
 80003a0:	619a      	str	r2, [r3, #24]
 80003a2:	e003      	b.n	80003ac <lcd_cmd+0x108>
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <lcd_cmd+0x194>)
 80003a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003aa:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d003      	beq.n	80003be <lcd_cmd+0x11a>
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <lcd_cmd+0x194>)
 80003b8:	2210      	movs	r2, #16
 80003ba:	619a      	str	r2, [r3, #24]
 80003bc:	e003      	b.n	80003c6 <lcd_cmd+0x122>
 80003be:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <lcd_cmd+0x194>)
 80003c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003c4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d004      	beq.n	80003da <lcd_cmd+0x136>
 80003d0:	4b19      	ldr	r3, [pc, #100]	; (8000438 <lcd_cmd+0x194>)
 80003d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003d6:	619a      	str	r2, [r3, #24]
 80003d8:	e003      	b.n	80003e2 <lcd_cmd+0x13e>
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <lcd_cmd+0x194>)
 80003dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80003e0:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d005      	beq.n	80003f8 <lcd_cmd+0x154>
 80003ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f4:	619a      	str	r2, [r3, #24]
 80003f6:	e004      	b.n	8000402 <lcd_cmd+0x15e>
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000400:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000402:	f7ff ff47 	bl	8000294 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <lcd_cmd+0x190>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <lcd_cmd+0x194>)
 800040e:	2220      	movs	r2, #32
 8000410:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <lcd_cmd+0x194>)
 8000414:	2210      	movs	r2, #16
 8000416:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <lcd_cmd+0x194>)
 800041a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800041e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000420:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	48000800 	.word	0x48000800
 8000438:	48000400 	.word	0x48000400

0800043c <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000446:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000454:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000456:	4b5e      	ldr	r3, [pc, #376]	; (80005d0 <lcd_char_cp+0x194>)
 8000458:	2280      	movs	r2, #128	; 0x80
 800045a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 800045c:	4b5d      	ldr	r3, [pc, #372]	; (80005d4 <lcd_char_cp+0x198>)
 800045e:	2220      	movs	r2, #32
 8000460:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000462:	4b5c      	ldr	r3, [pc, #368]	; (80005d4 <lcd_char_cp+0x198>)
 8000464:	2210      	movs	r2, #16
 8000466:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000468:	4b5a      	ldr	r3, [pc, #360]	; (80005d4 <lcd_char_cp+0x198>)
 800046a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800046e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000478:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800047a:	f7ff ff0b 	bl	8000294 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800047e:	4b54      	ldr	r3, [pc, #336]	; (80005d0 <lcd_char_cp+0x194>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a53      	ldr	r2, [pc, #332]	; (80005d0 <lcd_char_cp+0x194>)
 8000484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000488:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	f003 0310 	and.w	r3, r3, #16
 8000490:	2b00      	cmp	r3, #0
 8000492:	d003      	beq.n	800049c <lcd_char_cp+0x60>
 8000494:	4b4f      	ldr	r3, [pc, #316]	; (80005d4 <lcd_char_cp+0x198>)
 8000496:	2220      	movs	r2, #32
 8000498:	619a      	str	r2, [r3, #24]
 800049a:	e003      	b.n	80004a4 <lcd_char_cp+0x68>
 800049c:	4b4d      	ldr	r3, [pc, #308]	; (80005d4 <lcd_char_cp+0x198>)
 800049e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004a2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	f003 0320 	and.w	r3, r3, #32
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d003      	beq.n	80004b6 <lcd_char_cp+0x7a>
 80004ae:	4b49      	ldr	r3, [pc, #292]	; (80005d4 <lcd_char_cp+0x198>)
 80004b0:	2210      	movs	r2, #16
 80004b2:	619a      	str	r2, [r3, #24]
 80004b4:	e003      	b.n	80004be <lcd_char_cp+0x82>
 80004b6:	4b47      	ldr	r3, [pc, #284]	; (80005d4 <lcd_char_cp+0x198>)
 80004b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004bc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d004      	beq.n	80004d2 <lcd_char_cp+0x96>
 80004c8:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <lcd_char_cp+0x198>)
 80004ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004ce:	619a      	str	r2, [r3, #24]
 80004d0:	e003      	b.n	80004da <lcd_char_cp+0x9e>
 80004d2:	4b40      	ldr	r3, [pc, #256]	; (80005d4 <lcd_char_cp+0x198>)
 80004d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80004d8:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	da05      	bge.n	80004ee <lcd_char_cp+0xb2>
 80004e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ea:	619a      	str	r2, [r3, #24]
 80004ec:	e004      	b.n	80004f8 <lcd_char_cp+0xbc>
 80004ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004f6:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80004f8:	f7ff fecc 	bl	8000294 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <lcd_char_cp+0x194>)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000502:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <lcd_char_cp+0x198>)
 8000504:	2220      	movs	r2, #32
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <lcd_char_cp+0x198>)
 800050a:	2210      	movs	r2, #16
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800050e:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <lcd_char_cp+0x198>)
 8000510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051e:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000520:	f7ff feb8 	bl	8000294 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <lcd_char_cp+0x194>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a29      	ldr	r2, [pc, #164]	; (80005d0 <lcd_char_cp+0x194>)
 800052a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052e:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	2b00      	cmp	r3, #0
 8000538:	d003      	beq.n	8000542 <lcd_char_cp+0x106>
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <lcd_char_cp+0x198>)
 800053c:	2220      	movs	r2, #32
 800053e:	619a      	str	r2, [r3, #24]
 8000540:	e003      	b.n	800054a <lcd_char_cp+0x10e>
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <lcd_char_cp+0x198>)
 8000544:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000548:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	2b00      	cmp	r3, #0
 8000552:	d003      	beq.n	800055c <lcd_char_cp+0x120>
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <lcd_char_cp+0x198>)
 8000556:	2210      	movs	r2, #16
 8000558:	619a      	str	r2, [r3, #24]
 800055a:	e003      	b.n	8000564 <lcd_char_cp+0x128>
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <lcd_char_cp+0x198>)
 800055e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000562:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	2b00      	cmp	r3, #0
 800056c:	d004      	beq.n	8000578 <lcd_char_cp+0x13c>
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <lcd_char_cp+0x198>)
 8000570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000574:	619a      	str	r2, [r3, #24]
 8000576:	e003      	b.n	8000580 <lcd_char_cp+0x144>
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <lcd_char_cp+0x198>)
 800057a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800057e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	2b00      	cmp	r3, #0
 8000588:	d005      	beq.n	8000596 <lcd_char_cp+0x15a>
 800058a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000592:	619a      	str	r2, [r3, #24]
 8000594:	e004      	b.n	80005a0 <lcd_char_cp+0x164>
 8000596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800059e:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80005a0:	f7ff fe78 	bl	8000294 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <lcd_char_cp+0x194>)
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <lcd_char_cp+0x198>)
 80005ac:	2220      	movs	r2, #32
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <lcd_char_cp+0x198>)
 80005b2:	2210      	movs	r2, #16
 80005b4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <lcd_char_cp+0x198>)
 80005b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80005be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000800 	.word	0x48000800
 80005d4:	48000400 	.word	0x48000400

080005d8 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	while(*out_char)
 80005e0:	e008      	b.n	80005f4 <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff26 	bl	800043c <lcd_char_cp>
        lcd_delay();
 80005f0:	f7ff fe50 	bl	8000294 <lcd_delay>
	while(*out_char)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1f2      	bne.n	80005e2 <lcd_out_cp+0xa>
	}

}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000618:	20fa      	movs	r0, #250	; 0xfa
 800061a:	f001 f8ab 	bl	8001774 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 800061e:	2002      	movs	r0, #2
 8000620:	f7ff fe40 	bl	80002a4 <lcd_cmd>
    HAL_Delay(50);
 8000624:	2032      	movs	r0, #50	; 0x32
 8000626:	f001 f8a5 	bl	8001774 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 800062a:	79fa      	ldrb	r2, [r7, #7]
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	4313      	orrs	r3, r2
 8000630:	b2da      	uxtb	r2, r3
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	4313      	orrs	r3, r2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fe30 	bl	80002a4 <lcd_cmd>
    HAL_Delay(50);
 8000644:	2032      	movs	r0, #50	; 0x32
 8000646:	f001 f895 	bl	8001774 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 800064a:	2006      	movs	r0, #6
 800064c:	f7ff fe2a 	bl	80002a4 <lcd_cmd>
    HAL_Delay(50);
 8000650:	2032      	movs	r0, #50	; 0x32
 8000652:	f001 f88f 	bl	8001774 <HAL_Delay>
    lcd_cmd(0x0E);
 8000656:	200e      	movs	r0, #14
 8000658:	f7ff fe24 	bl	80002a4 <lcd_cmd>
    HAL_Delay(50);
 800065c:	2032      	movs	r0, #50	; 0x32
 800065e:	f001 f889 	bl	8001774 <HAL_Delay>
    lcd_cmd(0x0C);
 8000662:	200c      	movs	r0, #12
 8000664:	f7ff fe1e 	bl	80002a4 <lcd_cmd>
    HAL_Delay(50);
 8000668:	2032      	movs	r0, #50	; 0x32
 800066a:	f001 f883 	bl	8001774 <HAL_Delay>
    lcd_cmd(0x01);
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fe18 	bl	80002a4 <lcd_cmd>
    HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f001 f87d 	bl	8001774 <HAL_Delay>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	4603      	mov	r3, r0
 800068a:	460a      	mov	r2, r1
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	4613      	mov	r3, r2
 8000690:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d106      	bne.n	80006a6 <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	337f      	adds	r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe00 	bl	80002a4 <lcd_cmd>
 80006a4:	e008      	b.n	80006b8 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d105      	bne.n	80006b8 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	3b41      	subs	r3, #65	; 0x41
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fdf6 	bl	80002a4 <lcd_cmd>
	}
    HAL_Delay(5);
 80006b8:	2005      	movs	r0, #5
 80006ba:	f001 f85b 	bl	8001774 <HAL_Delay>

}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <lcd_char>:

void lcd_char(unsigned char row, unsigned char column, char out_char)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4603      	mov	r3, r0
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	460b      	mov	r3, r1
 80006d2:	71bb      	strb	r3, [r7, #6]
 80006d4:	4613      	mov	r3, r2
 80006d6:	717b      	strb	r3, [r7, #5]
	lcd_gotoxy(row, column);
 80006d8:	79ba      	ldrb	r2, [r7, #6]
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4611      	mov	r1, r2
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffcf 	bl	8000682 <lcd_gotoxy>
	lcd_char_cp(out_char);
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fea8 	bl	800043c <lcd_char_cp>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	603a      	str	r2, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	460b      	mov	r3, r1
 8000702:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000704:	79ba      	ldrb	r2, [r7, #6]
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ffb9 	bl	8000682 <lcd_gotoxy>
	lcd_out_cp(out_char);
 8000710:	6838      	ldr	r0, [r7, #0]
 8000712:	f7ff ff61 	bl	80005d8 <lcd_out_cp>
    HAL_Delay(5);
 8000716:	2005      	movs	r0, #5
 8000718:	f001 f82c 	bl	8001774 <HAL_Delay>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <lcd_clear>:
void lcd_clear(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff fdbb 	bl	80002a4 <lcd_cmd>
    HAL_Delay(5);
 800072e:	2005      	movs	r0, #5
 8000730:	f001 f820 	bl	8001774 <HAL_Delay>

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcd_line1>:
void lcd_line1(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	lcd_cmd(0x80);
 800073c:	2080      	movs	r0, #128	; 0x80
 800073e:	f7ff fdb1 	bl	80002a4 <lcd_cmd>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}

08000746 <lcd_line2>:

void lcd_line2(void) {
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
	lcd_cmd(0xC0);
 800074a:	20c0      	movs	r0, #192	; 0xc0
 800074c:	f7ff fdaa 	bl	80002a4 <lcd_cmd>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <create_customs>:
volatile unsigned char map[256];
volatile unsigned char cmap[32];

volatile unsigned char customs[7][8];

void create_customs() {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	//znak1
	customs[0][0] = 0b01010;
 800075a:	4b75      	ldr	r3, [pc, #468]	; (8000930 <create_customs+0x1dc>)
 800075c:	220a      	movs	r2, #10
 800075e:	701a      	strb	r2, [r3, #0]
	customs[0][1] = 0b01010;
 8000760:	4b73      	ldr	r3, [pc, #460]	; (8000930 <create_customs+0x1dc>)
 8000762:	220a      	movs	r2, #10
 8000764:	705a      	strb	r2, [r3, #1]
	customs[0][2] = 0b01010;
 8000766:	4b72      	ldr	r3, [pc, #456]	; (8000930 <create_customs+0x1dc>)
 8000768:	220a      	movs	r2, #10
 800076a:	709a      	strb	r2, [r3, #2]
	customs[0][4] = 0b00000;
 800076c:	4b70      	ldr	r3, [pc, #448]	; (8000930 <create_customs+0x1dc>)
 800076e:	2200      	movs	r2, #0
 8000770:	711a      	strb	r2, [r3, #4]
	customs[0][3] = 0b00000;
 8000772:	4b6f      	ldr	r3, [pc, #444]	; (8000930 <create_customs+0x1dc>)
 8000774:	2200      	movs	r2, #0
 8000776:	70da      	strb	r2, [r3, #3]
	customs[0][5] = 0b01010;
 8000778:	4b6d      	ldr	r3, [pc, #436]	; (8000930 <create_customs+0x1dc>)
 800077a:	220a      	movs	r2, #10
 800077c:	715a      	strb	r2, [r3, #5]
	customs[0][6] = 0b01010;
 800077e:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <create_customs+0x1dc>)
 8000780:	220a      	movs	r2, #10
 8000782:	719a      	strb	r2, [r3, #6]
	customs[0][7] = 0b01010;
 8000784:	4b6a      	ldr	r3, [pc, #424]	; (8000930 <create_customs+0x1dc>)
 8000786:	220a      	movs	r2, #10
 8000788:	71da      	strb	r2, [r3, #7]

	//znak2
	customs[1][0] = 0b11011;
 800078a:	4b69      	ldr	r3, [pc, #420]	; (8000930 <create_customs+0x1dc>)
 800078c:	221b      	movs	r2, #27
 800078e:	721a      	strb	r2, [r3, #8]
	customs[1][1] = 0b00000;
 8000790:	4b67      	ldr	r3, [pc, #412]	; (8000930 <create_customs+0x1dc>)
 8000792:	2200      	movs	r2, #0
 8000794:	725a      	strb	r2, [r3, #9]
	customs[1][2] = 0b11011;
 8000796:	4b66      	ldr	r3, [pc, #408]	; (8000930 <create_customs+0x1dc>)
 8000798:	221b      	movs	r2, #27
 800079a:	729a      	strb	r2, [r3, #10]
	customs[1][4] = 0b11011;
 800079c:	4b64      	ldr	r3, [pc, #400]	; (8000930 <create_customs+0x1dc>)
 800079e:	221b      	movs	r2, #27
 80007a0:	731a      	strb	r2, [r3, #12]
	customs[1][3] = 0b11011;
 80007a2:	4b63      	ldr	r3, [pc, #396]	; (8000930 <create_customs+0x1dc>)
 80007a4:	221b      	movs	r2, #27
 80007a6:	72da      	strb	r2, [r3, #11]
	customs[1][5] = 0b11011;
 80007a8:	4b61      	ldr	r3, [pc, #388]	; (8000930 <create_customs+0x1dc>)
 80007aa:	221b      	movs	r2, #27
 80007ac:	735a      	strb	r2, [r3, #13]
	customs[1][6] = 0b00000;
 80007ae:	4b60      	ldr	r3, [pc, #384]	; (8000930 <create_customs+0x1dc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	739a      	strb	r2, [r3, #14]
	customs[1][7] = 0b11011;
 80007b4:	4b5e      	ldr	r3, [pc, #376]	; (8000930 <create_customs+0x1dc>)
 80007b6:	221b      	movs	r2, #27
 80007b8:	73da      	strb	r2, [r3, #15]

	//znak3
	customs[2][0] = 0b00000;
 80007ba:	4b5d      	ldr	r3, [pc, #372]	; (8000930 <create_customs+0x1dc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	741a      	strb	r2, [r3, #16]
	customs[2][1] = 0b00100;
 80007c0:	4b5b      	ldr	r3, [pc, #364]	; (8000930 <create_customs+0x1dc>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	745a      	strb	r2, [r3, #17]
	customs[2][2] = 0b00100;
 80007c6:	4b5a      	ldr	r3, [pc, #360]	; (8000930 <create_customs+0x1dc>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	749a      	strb	r2, [r3, #18]
	customs[2][4] = 0b00101;
 80007cc:	4b58      	ldr	r3, [pc, #352]	; (8000930 <create_customs+0x1dc>)
 80007ce:	2205      	movs	r2, #5
 80007d0:	751a      	strb	r2, [r3, #20]
	customs[2][3] = 0b10100;
 80007d2:	4b57      	ldr	r3, [pc, #348]	; (8000930 <create_customs+0x1dc>)
 80007d4:	2214      	movs	r2, #20
 80007d6:	74da      	strb	r2, [r3, #19]
	customs[2][5] = 0b00100;
 80007d8:	4b55      	ldr	r3, [pc, #340]	; (8000930 <create_customs+0x1dc>)
 80007da:	2204      	movs	r2, #4
 80007dc:	755a      	strb	r2, [r3, #21]
	customs[2][6] = 0b00100;
 80007de:	4b54      	ldr	r3, [pc, #336]	; (8000930 <create_customs+0x1dc>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	759a      	strb	r2, [r3, #22]
	customs[2][7] = 0b00000;
 80007e4:	4b52      	ldr	r3, [pc, #328]	; (8000930 <create_customs+0x1dc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	75da      	strb	r2, [r3, #23]


	//znak4
	customs[3][0] = 0b00100;
 80007ea:	4b51      	ldr	r3, [pc, #324]	; (8000930 <create_customs+0x1dc>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	761a      	strb	r2, [r3, #24]
	customs[3][1] = 0b01110;
 80007f0:	4b4f      	ldr	r3, [pc, #316]	; (8000930 <create_customs+0x1dc>)
 80007f2:	220e      	movs	r2, #14
 80007f4:	765a      	strb	r2, [r3, #25]
	customs[3][2] = 0b00000;
 80007f6:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <create_customs+0x1dc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	769a      	strb	r2, [r3, #26]
	customs[3][4] = 0b11011;
 80007fc:	4b4c      	ldr	r3, [pc, #304]	; (8000930 <create_customs+0x1dc>)
 80007fe:	221b      	movs	r2, #27
 8000800:	771a      	strb	r2, [r3, #28]
	customs[3][3] = 0b11011;
 8000802:	4b4b      	ldr	r3, [pc, #300]	; (8000930 <create_customs+0x1dc>)
 8000804:	221b      	movs	r2, #27
 8000806:	76da      	strb	r2, [r3, #27]
	customs[3][5] = 0b00000;
 8000808:	4b49      	ldr	r3, [pc, #292]	; (8000930 <create_customs+0x1dc>)
 800080a:	2200      	movs	r2, #0
 800080c:	775a      	strb	r2, [r3, #29]
	customs[3][6] = 0b01110;
 800080e:	4b48      	ldr	r3, [pc, #288]	; (8000930 <create_customs+0x1dc>)
 8000810:	220e      	movs	r2, #14
 8000812:	779a      	strb	r2, [r3, #30]
	customs[3][7] = 0b00100;
 8000814:	4b46      	ldr	r3, [pc, #280]	; (8000930 <create_customs+0x1dc>)
 8000816:	2204      	movs	r2, #4
 8000818:	77da      	strb	r2, [r3, #31]

	//znak5
	customs[4][0] = 0b10001;
 800081a:	4b45      	ldr	r3, [pc, #276]	; (8000930 <create_customs+0x1dc>)
 800081c:	2211      	movs	r2, #17
 800081e:	f883 2020 	strb.w	r2, [r3, #32]
	customs[4][1] = 0b10001;
 8000822:	4b43      	ldr	r3, [pc, #268]	; (8000930 <create_customs+0x1dc>)
 8000824:	2211      	movs	r2, #17
 8000826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	customs[4][2] = 0b11011;
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <create_customs+0x1dc>)
 800082c:	221b      	movs	r2, #27
 800082e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	customs[4][4] = 0b00000;
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <create_customs+0x1dc>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	customs[4][3] = 0b00000;
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <create_customs+0x1dc>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	customs[4][5] = 0b11011;
 8000842:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <create_customs+0x1dc>)
 8000844:	221b      	movs	r2, #27
 8000846:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	customs[4][6] = 0b10001;
 800084a:	4b39      	ldr	r3, [pc, #228]	; (8000930 <create_customs+0x1dc>)
 800084c:	2211      	movs	r2, #17
 800084e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	customs[4][7] = 0b10001;
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <create_customs+0x1dc>)
 8000854:	2211      	movs	r2, #17
 8000856:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	//znak6
	customs[5][0] = 0b11011;
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <create_customs+0x1dc>)
 800085c:	221b      	movs	r2, #27
 800085e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	customs[5][1] = 0b00000;
 8000862:	4b33      	ldr	r3, [pc, #204]	; (8000930 <create_customs+0x1dc>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	customs[5][2] = 0b10101;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <create_customs+0x1dc>)
 800086c:	2215      	movs	r2, #21
 800086e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	customs[5][4] = 0b00100;
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <create_customs+0x1dc>)
 8000874:	2204      	movs	r2, #4
 8000876:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	customs[5][3] = 0b00100;
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <create_customs+0x1dc>)
 800087c:	2204      	movs	r2, #4
 800087e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	customs[5][5] = 0b10101;
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <create_customs+0x1dc>)
 8000884:	2215      	movs	r2, #21
 8000886:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	customs[5][6] = 0b00000;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <create_customs+0x1dc>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	customs[5][7] = 0b11011;
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <create_customs+0x1dc>)
 8000894:	221b      	movs	r2, #27
 8000896:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//znak7
	customs[6][0] = 0b00000;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <create_customs+0x1dc>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	customs[6][1] = 0b01010;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <create_customs+0x1dc>)
 80008a4:	220a      	movs	r2, #10
 80008a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	customs[6][2] = 0b11011;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <create_customs+0x1dc>)
 80008ac:	221b      	movs	r2, #27
 80008ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	customs[6][4] = 0b01000;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <create_customs+0x1dc>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	customs[6][3] = 0b00010;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <create_customs+0x1dc>)
 80008bc:	2202      	movs	r2, #2
 80008be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	customs[6][5] = 0b11011;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <create_customs+0x1dc>)
 80008c4:	221b      	movs	r2, #27
 80008c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	customs[6][6] = 0b01010;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <create_customs+0x1dc>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	customs[6][7] = 0b00000;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <create_customs+0x1dc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	for(int k = 0; k<7; k++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	e01e      	b.n	800091e <create_customs+0x1ca>
		lcd_cmd(0x40 + (k + 1) * 8);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3309      	adds	r3, #9
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fcda 	bl	80002a4 <lcd_cmd>
		for (int i = 0; i < 8; i++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	e00d      	b.n	8000912 <create_customs+0x1be>
			lcd_char_cp(customs[k][i]);
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <create_customs+0x1dc>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	441a      	add	r2, r3
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fd98 	bl	800043c <lcd_char_cp>
		for (int i = 0; i < 8; i++) {
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b07      	cmp	r3, #7
 8000916:	ddee      	ble.n	80008f6 <create_customs+0x1a2>
	for(int k = 0; k<7; k++) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3301      	adds	r3, #1
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b06      	cmp	r3, #6
 8000922:	dddd      	ble.n	80008e0 <create_customs+0x18c>
	customs[0][5] = 0b00000;
	customs[0][6] = 0b00000;
	customs[0][7] = 0b00000;
	 */

}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000025c 	.word	0x2000025c

08000934 <create_map>:

void create_map() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0

	for(int i = 0; i < 32; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	e007      	b.n	8000950 <create_map+0x1c>
		cmap[i] = ' ';
 8000940:	4a55      	ldr	r2, [pc, #340]	; (8000a98 <create_map+0x164>)
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	4413      	add	r3, r2
 8000946:	2220      	movs	r2, #32
 8000948:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++) {
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	3301      	adds	r3, #1
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	2b1f      	cmp	r3, #31
 8000954:	ddf4      	ble.n	8000940 <create_map+0xc>
	}

	for(int i = 1; i<16; i++) {
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
 800095a:	e031      	b.n	80009c0 <create_map+0x8c>
		int prz = rand() % 7;
 800095c:	f004 f924 	bl	8004ba8 <rand>
 8000960:	4602      	mov	r2, r0
 8000962:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <create_map+0x168>)
 8000964:	fb83 1302 	smull	r1, r3, r3, r2
 8000968:	4413      	add	r3, r2
 800096a:	1099      	asrs	r1, r3, #2
 800096c:	17d3      	asrs	r3, r2, #31
 800096e:	1ac9      	subs	r1, r1, r3
 8000970:	460b      	mov	r3, r1
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	607b      	str	r3, [r7, #4]
		cmap[i] = 1 + prz;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	3301      	adds	r3, #1
 8000980:	b2d9      	uxtb	r1, r3
 8000982:	4a45      	ldr	r2, [pc, #276]	; (8000a98 <create_map+0x164>)
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	4413      	add	r3, r2
 8000988:	460a      	mov	r2, r1
 800098a:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	e010      	b.n	80009b4 <create_map+0x80>
			map[i * 8 + j] = customs[prz][j];
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	00da      	lsls	r2, r3, #3
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	4413      	add	r3, r2
 800099a:	4941      	ldr	r1, [pc, #260]	; (8000aa0 <create_map+0x16c>)
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	00d2      	lsls	r2, r2, #3
 80009a0:	4411      	add	r1, r2
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	440a      	add	r2, r1
 80009a6:	7812      	ldrb	r2, [r2, #0]
 80009a8:	b2d1      	uxtb	r1, r2
 80009aa:	4a3e      	ldr	r2, [pc, #248]	; (8000aa4 <create_map+0x170>)
 80009ac:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 8; j++) {
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3301      	adds	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	2b07      	cmp	r3, #7
 80009b8:	ddeb      	ble.n	8000992 <create_map+0x5e>
	for(int i = 1; i<16; i++) {
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	3301      	adds	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	ddca      	ble.n	800095c <create_map+0x28>
		}
	}
	for(int i = 0; i<15; i++) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	e031      	b.n	8000a30 <create_map+0xfc>
		int prz = rand() % 7;
 80009cc:	f004 f8ec 	bl	8004ba8 <rand>
 80009d0:	4602      	mov	r2, r0
 80009d2:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <create_map+0x168>)
 80009d4:	fb83 1302 	smull	r1, r3, r3, r2
 80009d8:	4413      	add	r3, r2
 80009da:	1099      	asrs	r1, r3, #2
 80009dc:	17d3      	asrs	r3, r2, #31
 80009de:	1ac9      	subs	r1, r1, r3
 80009e0:	460b      	mov	r3, r1
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	1a5b      	subs	r3, r3, r1
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	60bb      	str	r3, [r7, #8]
		cmap[16 + i] = 1 + prz;
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	3310      	adds	r3, #16
 80009f2:	3201      	adds	r2, #1
 80009f4:	b2d1      	uxtb	r1, r2
 80009f6:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <create_map+0x164>)
 80009f8:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 8; j++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e011      	b.n	8000a24 <create_map+0xf0>
			map[128 + i * 8 + j] = customs[prz][j];
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3310      	adds	r3, #16
 8000a04:	00da      	lsls	r2, r3, #3
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4925      	ldr	r1, [pc, #148]	; (8000aa0 <create_map+0x16c>)
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	00d2      	lsls	r2, r2, #3
 8000a10:	4411      	add	r1, r2
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	440a      	add	r2, r1
 8000a16:	7812      	ldrb	r2, [r2, #0]
 8000a18:	b2d1      	uxtb	r1, r2
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <create_map+0x170>)
 8000a1c:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 8; j++) {
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	2b07      	cmp	r3, #7
 8000a28:	ddea      	ble.n	8000a00 <create_map+0xcc>
	for(int i = 0; i<15; i++) {
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2b0e      	cmp	r3, #14
 8000a34:	ddca      	ble.n	80009cc <create_map+0x98>
//	cmap[k/8] = 2;
//	for (int i = 0; i < 8; i++) {
//		map[k + i] = customs[1][i];
//	}

	for (int i = 0; i < 16; i++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	e00f      	b.n	8000a5c <create_map+0x128>
		lcd_char(1, i + 1, cmap[i]);
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	3301      	adds	r3, #1
 8000a42:	b2d9      	uxtb	r1, r3
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <create_map+0x164>)
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fe38 	bl	80006c6 <lcd_char>
	for (int i = 0; i < 16; i++) {
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	2b0f      	cmp	r3, #15
 8000a60:	ddec      	ble.n	8000a3c <create_map+0x108>
	}
	for (int i = 0; i < 16; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e00f      	b.n	8000a88 <create_map+0x154>
		lcd_char(2, i + 1, cmap[16 + i]);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b2d9      	uxtb	r1, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3310      	adds	r3, #16
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <create_map+0x164>)
 8000a76:	5cd3      	ldrb	r3, [r2, r3]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff fe22 	bl	80006c6 <lcd_char>
	for (int i = 0; i < 16; i++) {
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	ddec      	ble.n	8000a68 <create_map+0x134>
	}
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000023c 	.word	0x2000023c
 8000a9c:	92492493 	.word	0x92492493
 8000aa0:	2000025c 	.word	0x2000025c
 8000aa4:	2000013c 	.word	0x2000013c

08000aa8 <create_char>:

void create_char(int addr, int x, int y, char p) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	70fb      	strb	r3, [r7, #3]

	int mx = x % 5;
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <create_char+0xd8>)
 8000aba:	fb83 1302 	smull	r1, r3, r3, r2
 8000abe:	1059      	asrs	r1, r3, #1
 8000ac0:	17d3      	asrs	r3, r2, #31
 8000ac2:	1ac9      	subs	r1, r1, r3
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
	int my = y % 8;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	425a      	negs	r2, r3
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	f002 0207 	and.w	r2, r2, #7
 8000ada:	bf58      	it	pl
 8000adc:	4253      	negpl	r3, r2
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24

	lcd_cmd(addr);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fbdd 	bl	80002a4 <lcd_cmd>
	for(int i = 0; i < 8; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aee:	e03e      	b.n	8000b6e <create_char+0xc6>
		int col = x / 5;
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <create_char+0xd8>)
 8000af4:	fb82 1203 	smull	r1, r2, r2, r3
 8000af8:	1052      	asrs	r2, r2, #1
 8000afa:	17db      	asrs	r3, r3, #31
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	623b      	str	r3, [r7, #32]
		int row = y / 8;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da00      	bge.n	8000b08 <create_char+0x60>
 8000b06:	3307      	adds	r3, #7
 8000b08:	10db      	asrs	r3, r3, #3
 8000b0a:	61fb      	str	r3, [r7, #28]

		int player = (i == my) ? (1 << (4 - mx)) : 0;
 8000b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d106      	bne.n	8000b22 <create_char+0x7a>
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b16:	f1c3 0304 	rsb	r3, r3, #4
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	e000      	b.n	8000b24 <create_char+0x7c>
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
		int m = map[(col * 8) + i % 8 + (row * 128)];
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	00da      	lsls	r2, r3, #3
 8000b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2c:	4259      	negs	r1, r3
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	f001 0107 	and.w	r1, r1, #7
 8000b36:	bf58      	it	pl
 8000b38:	424b      	negpl	r3, r1
 8000b3a:	441a      	add	r2, r3
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	01db      	lsls	r3, r3, #7
 8000b40:	4413      	add	r3, r2
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <create_char+0xdc>)
 8000b44:	5cd3      	ldrb	r3, [r2, r3]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	617b      	str	r3, [r7, #20]

		lcd_char_cp(m | (p ? player : 0));
 8000b4a:	78fb      	ldrb	r3, [r7, #3]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <create_char+0xae>
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	e000      	b.n	8000b58 <create_char+0xb0>
 8000b56:	2300      	movs	r3, #0
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	b252      	sxtb	r2, r2
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fc6a 	bl	800043c <lcd_char_cp>
	for(int i = 0; i < 8; i++) {
 8000b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b70:	2b07      	cmp	r3, #7
 8000b72:	ddbd      	ble.n	8000af0 <create_char+0x48>
	}
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	66666667 	.word	0x66666667
 8000b84:	2000013c 	.word	0x2000013c

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b09a      	sub	sp, #104	; 0x68
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f000 fd7c 	bl	800168a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f9ed 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 fae5 	bl	8001164 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b9a:	f000 faa5 	bl	80010e8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000b9e:	f000 fa2d 	bl	8000ffc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ba2:	217f      	movs	r1, #127	; 0x7f
 8000ba4:	489d      	ldr	r0, [pc, #628]	; (8000e1c <main+0x294>)
 8000ba6:	f002 f82d 	bl	8002c04 <HAL_ADCEx_Calibration_Start>

  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000baa:	2208      	movs	r2, #8
 8000bac:	2100      	movs	r1, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fd29 	bl	8000606 <lcd_init>

  lcd_clear();
 8000bb4:	f7ff fdb6 	bl	8000724 <lcd_clear>

  create_customs();
 8000bb8:	f7ff fdcc 	bl	8000754 <create_customs>
  //lcd_char(1, 1, 2);
  //lcd_char(1, 2, 0);

  //create(0x40, 2, 3);

  int x = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	667b      	str	r3, [r7, #100]	; 0x64
  int y = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	663b      	str	r3, [r7, #96]	; 0x60

  int move_t = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  int move_cd = 5;
 8000bc8:	2305      	movs	r3, #5
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c

  int start = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	65bb      	str	r3, [r7, #88]	; 0x58
  int frame = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54

  int state = 0; // PRE = 0, INGAME = 1, SCORE = 2
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	653b      	str	r3, [r7, #80]	; 0x50

  int score = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48

  lcd_clear();
 8000bdc:	f7ff fda2 	bl	8000724 <lcd_clear>
  lcd_print(1, 1, "  Press SELECT");
 8000be0:	4a8f      	ldr	r2, [pc, #572]	; (8000e20 <main+0x298>)
 8000be2:	2101      	movs	r1, #1
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fd85 	bl	80006f4 <lcd_print>
  lcd_print(2, 1, "    to play");
 8000bea:	4a8e      	ldr	r2, [pc, #568]	; (8000e24 <main+0x29c>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f7ff fd80 	bl	80006f4 <lcd_print>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //continue;

	  HAL_ADC_Start(&hadc1);
 8000bf4:	4889      	ldr	r0, [pc, #548]	; (8000e1c <main+0x294>)
 8000bf6:	f001 f93b 	bl	8001e70 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 2500);
 8000bfa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000bfe:	4887      	ldr	r0, [pc, #540]	; (8000e1c <main+0x294>)
 8000c00:	f001 f9f0 	bl	8001fe4 <HAL_ADC_PollForConversion>
	  int k = (300 + HAL_ADC_GetValue(&hadc1)) / 700;
 8000c04:	4885      	ldr	r0, [pc, #532]	; (8000e1c <main+0x294>)
 8000c06:	f001 fac5 	bl	8002194 <HAL_ADC_GetValue>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000c10:	4a85      	ldr	r2, [pc, #532]	; (8000e28 <main+0x2a0>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0a1b      	lsrs	r3, r3, #8
 8000c18:	647b      	str	r3, [r7, #68]	; 0x44

	  if(state == 0) {
 8000c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d110      	bne.n	8000c42 <main+0xba>
		  if(k != 4) {
 8000c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	f040 819b 	bne.w	8000f5e <main+0x3d6>
			  continue;
		  }
		  start = frame;
 8000c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c2a:	65bb      	str	r3, [r7, #88]	; 0x58
		  score = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
		  create_map();
 8000c30:	f7ff fe80 	bl	8000934 <create_map>

		  x = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	667b      	str	r3, [r7, #100]	; 0x64
		  y = 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	663b      	str	r3, [r7, #96]	; 0x60

		  state = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	653b      	str	r3, [r7, #80]	; 0x50
		  continue;
 8000c40:	e190      	b.n	8000f64 <main+0x3dc>
	  }

	  if(state == 2) {
 8000c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d110      	bne.n	8000c6a <main+0xe2>
		  if(k != 4) {
 8000c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	f040 8189 	bne.w	8000f62 <main+0x3da>
			  continue;
		  }
		  start = frame;
 8000c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c52:	65bb      	str	r3, [r7, #88]	; 0x58
		  score = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	64bb      	str	r3, [r7, #72]	; 0x48
		  create_map();
 8000c58:	f7ff fe6c 	bl	8000934 <create_map>

		  x = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	667b      	str	r3, [r7, #100]	; 0x64
		  y = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	663b      	str	r3, [r7, #96]	; 0x60

		  state = 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	653b      	str	r3, [r7, #80]	; 0x50
		  continue;
 8000c68:	e17c      	b.n	8000f64 <main+0x3dc>
	  }

	  if((frame - start)/2 >= 1000) {
 8000c6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c74:	db35      	blt.n	8000ce2 <main+0x15a>
		  score = 1000 * (x - 79 + y - 15) / 94;
 8000c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c78:	f1a3 024f 	sub.w	r2, r3, #79	; 0x4f
 8000c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c7e:	4413      	add	r3, r2
 8000c80:	3b0f      	subs	r3, #15
 8000c82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	4a68      	ldr	r2, [pc, #416]	; (8000e2c <main+0x2a4>)
 8000c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c90:	441a      	add	r2, r3
 8000c92:	1192      	asrs	r2, r2, #6
 8000c94:	17db      	asrs	r3, r3, #31
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48

		  lcd_clear();
 8000c9a:	f7ff fd43 	bl	8000724 <lcd_clear>
		  lcd_line1();
 8000c9e:	f7ff fd4b 	bl	8000738 <lcd_line1>
		  lcd_print(1, 1, "     SCORE:");
 8000ca2:	4a63      	ldr	r2, [pc, #396]	; (8000e30 <main+0x2a8>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fd24 	bl	80006f4 <lcd_print>
		  char buffer[16] = {' '};
 8000cac:	2320      	movs	r3, #32
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
		  sprintf(buffer, "       %d", score);
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc2:	495c      	ldr	r1, [pc, #368]	; (8000e34 <main+0x2ac>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 f86f 	bl	8004da8 <siprintf>
		  lcd_line2();
 8000cca:	f7ff fd3c 	bl	8000746 <lcd_line2>
		  lcd_print(2, 1, buffer);
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f7ff fd0c 	bl	80006f4 <lcd_print>

		  state = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	653b      	str	r3, [r7, #80]	; 0x50
		  continue;
 8000ce0:	e140      	b.n	8000f64 <main+0x3dc>
	  }

	  if(frame > move_t) {
 8000ce2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	f340 810d 	ble.w	8000f06 <main+0x37e>
		  int px = x;
 8000cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cee:	643b      	str	r3, [r7, #64]	; 0x40
		  int py = y;
 8000cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  switch(k) {
 8000cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d81a      	bhi.n	8000d30 <main+0x1a8>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <main+0x178>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d11 	.word	0x08000d11
 8000d04:	08000d19 	.word	0x08000d19
 8000d08:	08000d21 	.word	0x08000d21
 8000d0c:	08000d29 	.word	0x08000d29
		  case 0:
			  x += 1;
 8000d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d12:	3301      	adds	r3, #1
 8000d14:	667b      	str	r3, [r7, #100]	; 0x64
		  break;
 8000d16:	e00b      	b.n	8000d30 <main+0x1a8>

		  case 1:
			  y -= 1;
 8000d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	663b      	str	r3, [r7, #96]	; 0x60
		  break;
 8000d1e:	e007      	b.n	8000d30 <main+0x1a8>

		  case 2:
			  y += 1;
 8000d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d22:	3301      	adds	r3, #1
 8000d24:	663b      	str	r3, [r7, #96]	; 0x60
		  break;
 8000d26:	e003      	b.n	8000d30 <main+0x1a8>

		  case 3:
			  x -= 1;
 8000d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	667b      	str	r3, [r7, #100]	; 0x64
		  break;
 8000d2e:	bf00      	nop
		  }

		  if(x == 80 - 1 && y == 16 - 1) {
 8000d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d32:	2b4f      	cmp	r3, #79	; 0x4f
 8000d34:	d129      	bne.n	8000d8a <main+0x202>
 8000d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d126      	bne.n	8000d8a <main+0x202>
			  score = 1000 - (frame - start)/2;
 8000d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	0fda      	lsrs	r2, r3, #31
 8000d44:	4413      	add	r3, r2
 8000d46:	105b      	asrs	r3, r3, #1
 8000d48:	425b      	negs	r3, r3
 8000d4a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000d4e:	64bb      	str	r3, [r7, #72]	; 0x48

			  lcd_clear();
 8000d50:	f7ff fce8 	bl	8000724 <lcd_clear>
			  lcd_print(1, 1, "     SCORE:");
 8000d54:	4a36      	ldr	r2, [pc, #216]	; (8000e30 <main+0x2a8>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff fccb 	bl	80006f4 <lcd_print>
			  char buffer[16] = {' '};
 8000d5e:	2320      	movs	r3, #32
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
			  sprintf(buffer, "      %d", score);
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d70:	4931      	ldr	r1, [pc, #196]	; (8000e38 <main+0x2b0>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 f818 	bl	8004da8 <siprintf>
			  lcd_print(2, 1, buffer);
 8000d78:	463b      	mov	r3, r7
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff fcb8 	bl	80006f4 <lcd_print>

			  state = 2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	653b      	str	r3, [r7, #80]	; 0x50
			  continue;
 8000d88:	e0ec      	b.n	8000f64 <main+0x3dc>
		  }

		  int col = x / 5;
 8000d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d8c:	4a2b      	ldr	r2, [pc, #172]	; (8000e3c <main+0x2b4>)
 8000d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d92:	1052      	asrs	r2, r2, #1
 8000d94:	17db      	asrs	r3, r3, #31
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
		  int row = y / 8;
 8000d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da00      	bge.n	8000da2 <main+0x21a>
 8000da0:	3307      	adds	r3, #7
 8000da2:	10db      	asrs	r3, r3, #3
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34

		  char cant = (map[(col * 8) + y % 8 + (row * 128)] >> (4 - x % 5)) & 1;
 8000da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000da8:	00da      	lsls	r2, r3, #3
 8000daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dac:	4259      	negs	r1, r3
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	f001 0107 	and.w	r1, r1, #7
 8000db6:	bf58      	it	pl
 8000db8:	424b      	negpl	r3, r1
 8000dba:	441a      	add	r2, r3
 8000dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dbe:	01db      	lsls	r3, r3, #7
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <main+0x2b8>)
 8000dc4:	5cd3      	ldrb	r3, [r2, r3]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <main+0x2b4>)
 8000dce:	fb83 2301 	smull	r2, r3, r3, r1
 8000dd2:	105a      	asrs	r2, r3, #1
 8000dd4:	17cb      	asrs	r3, r1, #31
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	1aca      	subs	r2, r1, r3
 8000de0:	f1c2 0304 	rsb	r3, r2, #4
 8000de4:	fa40 f303 	asr.w	r3, r0, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		  if(cant || x < 0 || x >= 80 || y < 0 || y >= 16) {
 8000df2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10b      	bne.n	8000e12 <main+0x28a>
 8000dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db08      	blt.n	8000e12 <main+0x28a>
 8000e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e02:	2b4f      	cmp	r3, #79	; 0x4f
 8000e04:	dc05      	bgt.n	8000e12 <main+0x28a>
 8000e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db02      	blt.n	8000e12 <main+0x28a>
 8000e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	dd18      	ble.n	8000e44 <main+0x2bc>
			  x = px;
 8000e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e14:	667b      	str	r3, [r7, #100]	; 0x64
			  y = py;
 8000e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
 8000e1a:	e074      	b.n	8000f06 <main+0x37e>
 8000e1c:	20000084 	.word	0x20000084
 8000e20:	08005f3c 	.word	0x08005f3c
 8000e24:	08005f4c 	.word	0x08005f4c
 8000e28:	5d9f7391 	.word	0x5d9f7391
 8000e2c:	ae4c415d 	.word	0xae4c415d
 8000e30:	08005f58 	.word	0x08005f58
 8000e34:	08005f64 	.word	0x08005f64
 8000e38:	08005f70 	.word	0x08005f70
 8000e3c:	66666667 	.word	0x66666667
 8000e40:	2000013c 	.word	0x2000013c
		  } else {
			  if (x / 5 != px / 5) {
 8000e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e46:	4a48      	ldr	r2, [pc, #288]	; (8000f68 <main+0x3e0>)
 8000e48:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4c:	1052      	asrs	r2, r2, #1
 8000e4e:	17db      	asrs	r3, r3, #31
 8000e50:	1ad2      	subs	r2, r2, r3
 8000e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e54:	4944      	ldr	r1, [pc, #272]	; (8000f68 <main+0x3e0>)
 8000e56:	fb81 0103 	smull	r0, r1, r1, r3
 8000e5a:	1049      	asrs	r1, r1, #1
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d01f      	beq.n	8000ea4 <main+0x31c>
				  int row = y / 8;
 8000e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da00      	bge.n	8000e6c <main+0x2e4>
 8000e6a:	3307      	adds	r3, #7
 8000e6c:	10db      	asrs	r3, r3, #3
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
				  int col = px / 5;
 8000e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e72:	4a3d      	ldr	r2, [pc, #244]	; (8000f68 <main+0x3e0>)
 8000e74:	fb82 1203 	smull	r1, r2, r2, r3
 8000e78:	1052      	asrs	r2, r2, #1
 8000e7a:	17db      	asrs	r3, r3, #31
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28

				  lcd_char(1 + row, 1 + col, cmap[row * 16 + col]);
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3301      	adds	r3, #1
 8000e86:	b2d8      	uxtb	r0, r3
 8000e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2d9      	uxtb	r1, r3
 8000e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e92:	011a      	lsls	r2, r3, #4
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	4413      	add	r3, r2
 8000e98:	4a34      	ldr	r2, [pc, #208]	; (8000f6c <main+0x3e4>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f7ff fc11 	bl	80006c6 <lcd_char>
			  }
			  if (y / 8 != py / 8) {
 8000ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	da00      	bge.n	8000eac <main+0x324>
 8000eaa:	3307      	adds	r3, #7
 8000eac:	10db      	asrs	r3, r3, #3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da00      	bge.n	8000eb8 <main+0x330>
 8000eb6:	3307      	adds	r3, #7
 8000eb8:	10db      	asrs	r3, r3, #3
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d01f      	beq.n	8000efe <main+0x376>
				  int row = py / 8;
 8000ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da00      	bge.n	8000ec6 <main+0x33e>
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	10db      	asrs	r3, r3, #3
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
				  int col = x / 5;
 8000eca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ecc:	4a26      	ldr	r2, [pc, #152]	; (8000f68 <main+0x3e0>)
 8000ece:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed2:	1052      	asrs	r2, r2, #1
 8000ed4:	17db      	asrs	r3, r3, #31
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	623b      	str	r3, [r7, #32]

				  lcd_char(1 + row, 1 + col, cmap[row * 16 + col]);
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2d8      	uxtb	r0, r3
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2d9      	uxtb	r1, r3
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	011a      	lsls	r2, r3, #4
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <main+0x3e4>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f7ff fbe4 	bl	80006c6 <lcd_char>
			  }

			  move_t = frame + move_cd;
 8000efe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f02:	4413      	add	r3, r2
 8000f04:	65fb      	str	r3, [r7, #92]	; 0x5c

	  }



	  create_char(0x40, x, y, (frame / 10) % 2);
 8000f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <main+0x3e0>)
 8000f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0e:	1092      	asrs	r2, r2, #2
 8000f10:	17db      	asrs	r3, r3, #31
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	bfb8      	it	lt
 8000f1c:	425b      	neglt	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000f24:	2040      	movs	r0, #64	; 0x40
 8000f26:	f7ff fdbf 	bl	8000aa8 <create_char>
	  lcd_char(1 + y / 8, 1 + x / 5, 0);
 8000f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da00      	bge.n	8000f32 <main+0x3aa>
 8000f30:	3307      	adds	r3, #7
 8000f32:	10db      	asrs	r3, r3, #3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2d8      	uxtb	r0, r3
 8000f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <main+0x3e0>)
 8000f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f42:	1052      	asrs	r2, r2, #1
 8000f44:	17db      	asrs	r3, r3, #31
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fbb8 	bl	80006c6 <lcd_char>

	  //lcd_print(1, 1, "Hello World");

	  frame += 1;
 8000f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f58:	3301      	adds	r3, #1
 8000f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8000f5c:	e64a      	b.n	8000bf4 <main+0x6c>
			  continue;
 8000f5e:	bf00      	nop
 8000f60:	e648      	b.n	8000bf4 <main+0x6c>
			  continue;
 8000f62:	bf00      	nop
  {
 8000f64:	e646      	b.n	8000bf4 <main+0x6c>
 8000f66:	bf00      	nop
 8000f68:	66666667 	.word	0x66666667
 8000f6c:	2000023c 	.word	0x2000023c

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b096      	sub	sp, #88	; 0x58
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2244      	movs	r2, #68	; 0x44
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 ff75 	bl	8004e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f96:	f002 fb2d 	bl	80035f4 <HAL_PWREx_ControlVoltageScaling>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fa0:	f000 f958 	bl	8001254 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fb0:	2360      	movs	r3, #96	; 0x60
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 fb6f 	bl	80036a0 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000fc8:	f000 f944 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 ff37 	bl	8003e58 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ff0:	f000 f930 	bl	8001254 <Error_Handler>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3758      	adds	r7, #88	; 0x58
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001020:	4a2f      	ldr	r2, [pc, #188]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <MX_ADC1_Init+0xe0>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <MX_ADC1_Init+0xe0>)
 800103e:	2204      	movs	r2, #4
 8001040:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001044:	2200      	movs	r2, #0
 8001046:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <MX_ADC1_Init+0xe0>)
 800104a:	2200      	movs	r2, #0
 800104c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001050:	2201      	movs	r2, #1
 8001052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MX_ADC1_Init+0xe0>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_ADC1_Init+0xe0>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001072:	2200      	movs	r2, #0
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107e:	4817      	ldr	r0, [pc, #92]	; (80010dc <MX_ADC1_Init+0xe0>)
 8001080:	f000 fda6 	bl	8001bd0 <HAL_ADC_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800108a:	f000 f8e3 	bl	8001254 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <MX_ADC1_Init+0xe0>)
 800109a:	f001 fe13 	bl	8002cc4 <HAL_ADCEx_MultiModeConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010a4:	f000 f8d6 	bl	8001254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_ADC1_Init+0xe8>)
 80010aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ac:	2306      	movs	r3, #6
 80010ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b4:	237f      	movs	r3, #127	; 0x7f
 80010b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b8:	2304      	movs	r3, #4
 80010ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_ADC1_Init+0xe0>)
 80010c6:	f001 f873 	bl	80021b0 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010d0:	f000 f8c0 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000084 	.word	0x20000084
 80010e0:	50040000 	.word	0x50040000
 80010e4:	14f00020 	.word	0x14f00020

080010e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_I2C1_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <MX_I2C1_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_I2C1_Init+0x74>)
 80010f4:	f640 6214 	movw	r2, #3604	; 0xe14
 80010f8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_I2C1_Init+0x74>)
 8001102:	2201      	movs	r2, #1
 8001104:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_I2C1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_I2C1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_I2C1_Init+0x74>)
 8001126:	f002 f925 	bl	8003374 <HAL_I2C_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001130:	f000 f890 	bl	8001254 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <MX_I2C1_Init+0x74>)
 8001138:	f002 f9b7 	bl	80034aa <HAL_I2CEx_ConfigAnalogFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001142:	f000 f887 	bl	8001254 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001146:	2100      	movs	r1, #0
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_I2C1_Init+0x74>)
 800114a:	f002 f9f9 	bl	8003540 <HAL_I2CEx_ConfigDigitalFilter>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001154:	f000 f87e 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200000e8 	.word	0x200000e8
 8001160:	40005400 	.word	0x40005400

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <MX_GPIO_Init+0xe4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <MX_GPIO_Init+0xe4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <MX_GPIO_Init+0xe4>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_GPIO_Init+0xe4>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <MX_GPIO_Init+0xe4>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_GPIO_Init+0xe4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <MX_GPIO_Init+0xe4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a26      	ldr	r2, [pc, #152]	; (8001248 <MX_GPIO_Init+0xe4>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <MX_GPIO_Init+0xe4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80011c8:	4820      	ldr	r0, [pc, #128]	; (800124c <MX_GPIO_Init+0xe8>)
 80011ca:	f002 f8bb 	bl	8003344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	481f      	ldr	r0, [pc, #124]	; (8001250 <MX_GPIO_Init+0xec>)
 80011d4:	f002 f8b6 	bl	8003344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f002 f8af 	bl	8003344 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 80011e6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4619      	mov	r1, r3
 80011fe:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_GPIO_Init+0xe8>)
 8001200:	f001 fef6 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_GPIO_Init+0xec>)
 800121c:	f001 fee8 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8001220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f001 fed8 	bl	8002ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	e7fe      	b.n	800125c <Error_Handler+0x8>
	...

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_MspInit+0x44>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6613      	str	r3, [r2, #96]	; 0x60
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_MspInit+0x44>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x44>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x44>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6593      	str	r3, [r2, #88]	; 0x58
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x44>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0ac      	sub	sp, #176	; 0xb0
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2288      	movs	r2, #136	; 0x88
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fdd0 	bl	8004e6e <memset>
  if(hadc->Instance==ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d147      	bne.n	8001368 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80012ee:	2310      	movs	r3, #16
 80012f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012f2:	2307      	movs	r3, #7
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80012fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4618      	mov	r0, r3
 800130a:	f002 ff91 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001314:	f7ff ff9e 	bl	8001254 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_ADC_MspInit+0xcc>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a15      	ldr	r2, [pc, #84]	; (8001374 <HAL_ADC_MspInit+0xcc>)
 800131e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_ADC_MspInit+0xcc>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_ADC_MspInit+0xcc>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_ADC_MspInit+0xcc>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_ADC_MspInit+0xcc>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001348:	2301      	movs	r3, #1
 800134a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800134e:	230b      	movs	r3, #11
 8001350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f001 fe44 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	37b0      	adds	r7, #176	; 0xb0
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	50040000 	.word	0x50040000
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0ac      	sub	sp, #176	; 0xb0
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2288      	movs	r2, #136	; 0x88
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fd68 	bl	8004e6e <memset>
  if(hi2c->Instance==I2C1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a21      	ldr	r2, [pc, #132]	; (8001428 <HAL_I2C_MspInit+0xb0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d13b      	bne.n	8001420 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a8:	2340      	movs	r3, #64	; 0x40
 80013aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 ff3b 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013c0:	f7ff ff48 	bl	8001254 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_I2C_MspInit+0xb4>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	4a18      	ldr	r2, [pc, #96]	; (800142c <HAL_I2C_MspInit+0xb4>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_I2C_MspInit+0xb4>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e4:	2312      	movs	r3, #18
 80013e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f6:	2304      	movs	r3, #4
 80013f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001400:	4619      	mov	r1, r3
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 8001404:	f001 fdf4 	bl	8002ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_I2C_MspInit+0xb4>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_I2C_MspInit+0xb4>)
 800140e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001412:	6593      	str	r3, [r2, #88]	; 0x58
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_I2C_MspInit+0xb4>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	37b0      	adds	r7, #176	; 0xb0
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40005400 	.word	0x40005400
 800142c:	40021000 	.word	0x40021000
 8001430:	48000400 	.word	0x48000400

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f958 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return 1;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_kill>:

int _kill(int pid, int sig)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a2:	f003 fd33 	bl	8004f0c <__errno>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2216      	movs	r2, #22
 80014aa:	601a      	str	r2, [r3, #0]
  return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_exit>:

void _exit (int status)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ffe7 	bl	8001498 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ca:	e7fe      	b.n	80014ca <_exit+0x12>

080014cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e00a      	b.n	80014f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014de:	f3af 8000 	nop.w
 80014e2:	4601      	mov	r1, r0
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	b2ca      	uxtb	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbf0      	blt.n	80014de <_read+0x12>
  }

  return len;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e009      	b.n	800152c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	dbf1      	blt.n	8001518 <_write+0x12>
  }
  return len;
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_close>:

int _close(int file)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001566:	605a      	str	r2, [r3, #4]
  return 0;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_isatty>:

int _isatty(int file)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f003 fc98 	bl	8004f0c <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20018000 	.word	0x20018000
 8001608:	00000400 	.word	0x00000400
 800160c:	20000294 	.word	0x20000294
 8001610:	200003e8 	.word	0x200003e8

08001614 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800163c:	f7ff ffea 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <LoopForever+0x6>)
  ldr r1, =_edata
 8001642:	490d      	ldr	r1, [pc, #52]	; (8001678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <LoopForever+0xe>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001658:	4c0a      	ldr	r4, [pc, #40]	; (8001684 <LoopForever+0x16>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f003 fc57 	bl	8004f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800166a:	f7ff fa8d 	bl	8000b88 <main>

0800166e <LoopForever>:

LoopForever:
    b LoopForever
 800166e:	e7fe      	b.n	800166e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001670:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800167c:	080060a4 	.word	0x080060a4
  ldr r2, =_sbss
 8001680:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001684:	200003e8 	.word	0x200003e8

08001688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC1_2_IRQHandler>

0800168a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f001 fc77 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169a:	200f      	movs	r0, #15
 800169c:	f000 f80e 	bl	80016bc <HAL_InitTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	e001      	b.n	80016b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ac:	f7ff fdd8 	bl	8001260 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b0:	79fb      	ldrb	r3, [r7, #7]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_InitTick+0x6c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d023      	beq.n	8001718 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_InitTick+0x70>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_InitTick+0x6c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f001 fc75 	bl	8002fd6 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10f      	bne.n	8001712 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d809      	bhi.n	800170c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f001 fc4d 	bl	8002f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_InitTick+0x74>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e007      	b.n	800171c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e004      	b.n	800171c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e001      	b.n	800171c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	20000298 	.word	0x20000298

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000298 	.word	0x20000298

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000008 	.word	0x20000008

080017bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	609a      	str	r2, [r3, #8]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3360      	adds	r3, #96	; 0x60
 8001836:	461a      	mov	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <LL_ADC_SetOffset+0x44>)
 8001846:	4013      	ands	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	4313      	orrs	r3, r2
 8001854:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	03fff000 	.word	0x03fff000

0800186c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3360      	adds	r3, #96	; 0x60
 800187a:	461a      	mov	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3360      	adds	r3, #96	; 0x60
 80018a8:	461a      	mov	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3330      	adds	r3, #48	; 0x30
 8001904:	461a      	mov	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	4413      	add	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	211f      	movs	r1, #31
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	f003 011f 	and.w	r1, r3, #31
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	431a      	orrs	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3314      	adds	r3, #20
 800195c:	461a      	mov	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	0e5b      	lsrs	r3, r3, #25
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	0d1b      	lsrs	r3, r3, #20
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	2107      	movs	r1, #7
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	401a      	ands	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	0d1b      	lsrs	r3, r3, #20
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0318 	and.w	r3, r3, #24
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019c8:	40d9      	lsrs	r1, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	400b      	ands	r3, r1
 80019ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d2:	431a      	orrs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	0007ffff 	.word	0x0007ffff

080019ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 031f 	and.w	r3, r3, #31
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6093      	str	r3, [r2, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a5c:	d101      	bne.n	8001a62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001aac:	d101      	bne.n	8001ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001afc:	f043 0202 	orr.w	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <LL_ADC_IsEnabled+0x18>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_ADC_IsEnabled+0x1a>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d101      	bne.n	8001b4e <LL_ADC_IsDisableOngoing+0x18>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <LL_ADC_IsDisableOngoing+0x1a>
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b70:	f043 0204 	orr.w	r2, r3, #4
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e130      	b.n	8001e4c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fb55 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff19 	bl	8001a48 <LL_ADC_IsDeepPowerDownEnabled>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff feff 	bl	8001a24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff34 	bl	8001a98 <LL_ADC_IsInternalRegulatorEnabled>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d115      	bne.n	8001c62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff18 	bl	8001a70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c40:	4b84      	ldr	r3, [pc, #528]	; (8001e54 <HAL_ADC_Init+0x284>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	4a84      	ldr	r2, [pc, #528]	; (8001e58 <HAL_ADC_Init+0x288>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	3301      	adds	r3, #1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c54:	e002      	b.n	8001c5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f9      	bne.n	8001c56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff16 	bl	8001a98 <LL_ADC_IsInternalRegulatorEnabled>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10d      	bne.n	8001c8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f043 0210 	orr.w	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff76 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001c98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 80c9 	bne.w	8001e3a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 80c5 	bne.w	8001e3a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cb8:	f043 0202 	orr.w	r2, r3, #2
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff23 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d115      	bne.n	8001cfc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cd0:	4862      	ldr	r0, [pc, #392]	; (8001e5c <HAL_ADC_Init+0x28c>)
 8001cd2:	f7ff ff1d 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	4861      	ldr	r0, [pc, #388]	; (8001e60 <HAL_ADC_Init+0x290>)
 8001cda:	f7ff ff19 	bl	8001b10 <LL_ADC_IsEnabled>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	431c      	orrs	r4, r3
 8001ce2:	4860      	ldr	r0, [pc, #384]	; (8001e64 <HAL_ADC_Init+0x294>)
 8001ce4:	f7ff ff14 	bl	8001b10 <LL_ADC_IsEnabled>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4323      	orrs	r3, r4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	485c      	ldr	r0, [pc, #368]	; (8001e68 <HAL_ADC_Init+0x298>)
 8001cf8:	f7ff fd60 	bl	80017bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e5b      	ldrb	r3, [r3, #25]
 8001d00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	045b      	lsls	r3, r3, #17
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <HAL_ADC_Init+0x29c>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff1c 	bl	8001baa <LL_ADC_INJ_IsConversionOngoing>
 8001d72:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d13d      	bne.n	8001df6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d13a      	bne.n	8001df6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d84:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d8c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d9c:	f023 0302 	bic.w	r3, r3, #2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	69b9      	ldr	r1, [r7, #24]
 8001da6:	430b      	orrs	r3, r1
 8001da8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d118      	bne.n	8001de6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	e007      	b.n	8001df6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10c      	bne.n	8001e18 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	f023 010f 	bic.w	r1, r3, #15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
 8001e16:	e007      	b.n	8001e28 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020f 	bic.w	r2, r2, #15
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f023 0303 	bic.w	r3, r3, #3
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
 8001e38:	e007      	b.n	8001e4a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3724      	adds	r7, #36	; 0x24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	20000000 	.word	0x20000000
 8001e58:	053e2d63 	.word	0x053e2d63
 8001e5c:	50040000 	.word	0x50040000
 8001e60:	50040100 	.word	0x50040100
 8001e64:	50040200 	.word	0x50040200
 8001e68:	50040300 	.word	0x50040300
 8001e6c:	fff0c007 	.word	0xfff0c007

08001e70 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e78:	4857      	ldr	r0, [pc, #348]	; (8001fd8 <HAL_ADC_Start+0x168>)
 8001e7a:	f7ff fdb7 	bl	80019ec <LL_ADC_GetMultimode>
 8001e7e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe7d 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 809c 	bne.w	8001fca <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_Start+0x30>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e097      	b.n	8001fd0 <HAL_ADC_Start+0x160>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fd73 	bl	8002994 <ADC_Enable>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 8083 	bne.w	8001fc0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a42      	ldr	r2, [pc, #264]	; (8001fdc <HAL_ADC_Start+0x16c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d002      	beq.n	8001ede <HAL_ADC_Start+0x6e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	e000      	b.n	8001ee0 <HAL_ADC_Start+0x70>
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_ADC_Start+0x170>)
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d002      	beq.n	8001eee <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f06:	d106      	bne.n	8001f16 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f023 0206 	bic.w	r2, r3, #6
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	659a      	str	r2, [r3, #88]	; 0x58
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	221c      	movs	r2, #28
 8001f22:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2a      	ldr	r2, [pc, #168]	; (8001fdc <HAL_ADC_Start+0x16c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d002      	beq.n	8001f3c <HAL_ADC_Start+0xcc>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	e000      	b.n	8001f3e <HAL_ADC_Start+0xce>
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_ADC_Start+0x170>)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d008      	beq.n	8001f58 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d002      	beq.n	8001f58 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	d114      	bne.n	8001f82 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fdee 	bl	8001b5c <LL_ADC_REG_StartConversion>
 8001f80:	e025      	b.n	8001fce <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <HAL_ADC_Start+0x16c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d002      	beq.n	8001f9e <HAL_ADC_Start+0x12e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e000      	b.n	8001fa0 <HAL_ADC_Start+0x130>
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_ADC_Start+0x170>)
 8001fa0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00f      	beq.n	8001fce <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
 8001fbe:	e006      	b.n	8001fce <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fc8:	e001      	b.n	8001fce <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	50040300 	.word	0x50040300
 8001fdc:	50040100 	.word	0x50040100
 8001fe0:	50040000 	.word	0x50040000

08001fe4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fee:	4866      	ldr	r0, [pc, #408]	; (8002188 <HAL_ADC_PollForConversion+0x1a4>)
 8001ff0:	f7ff fcfc 	bl	80019ec <LL_ADC_GetMultimode>
 8001ff4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d102      	bne.n	8002004 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ffe:	2308      	movs	r3, #8
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e02a      	b.n	800205a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d002      	beq.n	8002016 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b09      	cmp	r3, #9
 8002014:	d111      	bne.n	800203a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0a4      	b.n	800217e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002034:	2304      	movs	r3, #4
 8002036:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002038:	e00f      	b.n	800205a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800203a:	4853      	ldr	r0, [pc, #332]	; (8002188 <HAL_ADC_PollForConversion+0x1a4>)
 800203c:	f7ff fce4 	bl	8001a08 <LL_ADC_GetMultiDMATransfer>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0220 	orr.w	r2, r3, #32
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e093      	b.n	800217e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002056:	2304      	movs	r3, #4
 8002058:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800205a:	f7ff fb7f 	bl	800175c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002060:	e021      	b.n	80020a6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d01d      	beq.n	80020a6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800206a:	f7ff fb77 	bl	800175c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d302      	bcc.n	8002080 <HAL_ADC_PollForConversion+0x9c>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d112      	bne.n	80020a6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0204 	orr.w	r2, r3, #4
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e06b      	b.n	800217e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0d6      	beq.n	8002062 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fc02 	bl	80018ce <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01c      	beq.n	800210a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e5b      	ldrb	r3, [r3, #25]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d118      	bne.n	800210a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d111      	bne.n	800210a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_ADC_PollForConversion+0x1a8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d002      	beq.n	800211a <HAL_ADC_PollForConversion+0x136>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	e000      	b.n	800211c <HAL_ADC_PollForConversion+0x138>
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_ADC_PollForConversion+0x1ac>)
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	4293      	cmp	r3, r2
 8002122:	d008      	beq.n	8002136 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d002      	beq.n	8002136 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b09      	cmp	r3, #9
 8002134:	d104      	bne.n	8002140 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	e00c      	b.n	800215a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_ADC_PollForConversion+0x1a8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d002      	beq.n	8002150 <HAL_ADC_PollForConversion+0x16c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e000      	b.n	8002152 <HAL_ADC_PollForConversion+0x16e>
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_ADC_PollForConversion+0x1ac>)
 8002152:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d104      	bne.n	800216a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2208      	movs	r2, #8
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e008      	b.n	800217c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d103      	bne.n	800217c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	220c      	movs	r2, #12
 800217a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	50040300 	.word	0x50040300
 800218c:	50040100 	.word	0x50040100
 8002190:	50040000 	.word	0x50040000

08002194 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0b6      	sub	sp, #216	; 0xd8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x22>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e3c9      	b.n	8002966 <HAL_ADC_ConfigChannel+0x7b6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fcd0 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 83aa 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d824      	bhi.n	8002246 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	3b02      	subs	r3, #2
 8002202:	2b03      	cmp	r3, #3
 8002204:	d81b      	bhi.n	800223e <HAL_ADC_ConfigChannel+0x8e>
 8002206:	a201      	add	r2, pc, #4	; (adr r2, 800220c <HAL_ADC_ConfigChannel+0x5c>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	0800221d 	.word	0x0800221d
 8002210:	08002225 	.word	0x08002225
 8002214:	0800222d 	.word	0x0800222d
 8002218:	08002235 	.word	0x08002235
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800221c:	230c      	movs	r3, #12
 800221e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002222:	e010      	b.n	8002246 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002224:	2312      	movs	r3, #18
 8002226:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800222a:	e00c      	b.n	8002246 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800222c:	2318      	movs	r3, #24
 800222e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002232:	e008      	b.n	8002246 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800223c:	e003      	b.n	8002246 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800223e:	2306      	movs	r3, #6
 8002240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002244:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002254:	f7ff fb4e 	bl	80018f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fc91 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8002262:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fc9d 	bl	8001baa <LL_ADC_INJ_IsConversionOngoing>
 8002270:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 81a4 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 819f 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	461a      	mov	r2, r3
 8002296:	f7ff fb59 	bl	800194c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d00a      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6919      	ldr	r1, [r3, #16]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022cc:	f7ff faaa 	bl	8001824 <LL_ADC_SetOffset>
 80022d0:	e179      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fac7 	bl	800186c <LL_ADC_GetOffsetChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x14e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fabc 	bl	800186c <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	e01e      	b.n	800233c <HAL_ADC_ConfigChannel+0x18c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fab1 	bl	800186c <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800231c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e004      	b.n	800233a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002330:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1a4>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	e018      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1d6>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800236c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800237c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002386:	429a      	cmp	r2, r3
 8002388:	d106      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fa80 	bl	8001898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa64 	bl	800186c <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x214>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fa59 	bl	800186c <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	e01e      	b.n	8002402 <HAL_ADC_ConfigChannel+0x252>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fa4e 	bl	800186c <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80023e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80023ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e004      	b.n	8002400 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80023f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x26a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e018      	b.n	800244c <HAL_ADC_ConfigChannel+0x29c>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800242e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e004      	b.n	800244c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fa1d 	bl	8001898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2102      	movs	r1, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fa01 	bl	800186c <LL_ADC_GetOffsetChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x2da>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2102      	movs	r1, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f9f6 	bl	800186c <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	e01e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x318>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f9eb 	bl	800186c <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80024a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80024b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e004      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80024bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x330>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	e014      	b.n	800250a <HAL_ADC_ConfigChannel+0x35a>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80024ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80024f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e004      	b.n	800250a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800250a:	429a      	cmp	r2, r3
 800250c:	d106      	bne.n	800251c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	2102      	movs	r1, #2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f9be 	bl	8001898 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2103      	movs	r1, #3
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f9a2 	bl	800186c <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x398>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2103      	movs	r1, #3
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f997 	bl	800186c <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	f003 021f 	and.w	r2, r3, #31
 8002546:	e017      	b.n	8002578 <HAL_ADC_ConfigChannel+0x3c8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2103      	movs	r1, #3
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f98c 	bl	800186c <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002562:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e003      	b.n	8002576 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800256e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x3e0>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	e011      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x404>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800259e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80025a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e003      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d106      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	2103      	movs	r1, #3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f969 	bl	8001898 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff faa0 	bl	8001b10 <LL_ADC_IsEnabled>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 8140 	bne.w	8002858 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f7ff f9dd 	bl	80019a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4a8f      	ldr	r2, [pc, #572]	; (800282c <HAL_ADC_ConfigChannel+0x67c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	f040 8131 	bne.w	8002858 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10b      	bne.n	800261e <HAL_ADC_ConfigChannel+0x46e>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	3301      	adds	r3, #1
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2b09      	cmp	r3, #9
 8002614:	bf94      	ite	ls
 8002616:	2301      	movls	r3, #1
 8002618:	2300      	movhi	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	e019      	b.n	8002652 <HAL_ADC_ConfigChannel+0x4a2>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800263a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2b09      	cmp	r3, #9
 800264a:	bf94      	ite	ls
 800264c:	2301      	movls	r3, #1
 800264e:	2300      	movhi	r3, #0
 8002650:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002652:	2b00      	cmp	r3, #0
 8002654:	d079      	beq.n	800274a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x4c2>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	3301      	adds	r3, #1
 800266a:	069b      	lsls	r3, r3, #26
 800266c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002670:	e015      	b.n	800269e <HAL_ADC_ConfigChannel+0x4ee>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002682:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e003      	b.n	8002696 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800268e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3301      	adds	r3, #1
 8002698:	069b      	lsls	r3, r3, #26
 800269a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_ADC_ConfigChannel+0x50e>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	3301      	adds	r3, #1
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	e017      	b.n	80026ee <HAL_ADC_ConfigChannel+0x53e>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80026cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e003      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80026da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	ea42 0103 	orr.w	r1, r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x564>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	3301      	adds	r3, #1
 8002706:	f003 021f 	and.w	r2, r3, #31
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	051b      	lsls	r3, r3, #20
 8002712:	e018      	b.n	8002746 <HAL_ADC_ConfigChannel+0x596>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002746:	430b      	orrs	r3, r1
 8002748:	e081      	b.n	800284e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x5b6>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	0e9b      	lsrs	r3, r3, #26
 800275c:	3301      	adds	r3, #1
 800275e:	069b      	lsls	r3, r3, #26
 8002760:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002764:	e015      	b.n	8002792 <HAL_ADC_ConfigChannel+0x5e2>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800277e:	2320      	movs	r3, #32
 8002780:	e003      	b.n	800278a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	3301      	adds	r3, #1
 800278c:	069b      	lsls	r3, r3, #26
 800278e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x602>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	3301      	adds	r3, #1
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2101      	movs	r1, #1
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	e017      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x632>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	61bb      	str	r3, [r7, #24]
  return result;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e003      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	3301      	adds	r3, #1
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	ea42 0103 	orr.w	r1, r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <HAL_ADC_ConfigChannel+0x65e>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	3301      	adds	r3, #1
 80027fa:	f003 021f 	and.w	r2, r3, #31
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	3b1e      	subs	r3, #30
 8002806:	051b      	lsls	r3, r3, #20
 8002808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800280c:	e01e      	b.n	800284c <HAL_ADC_ConfigChannel+0x69c>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	60fb      	str	r3, [r7, #12]
  return result;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002826:	2320      	movs	r3, #32
 8002828:	e006      	b.n	8002838 <HAL_ADC_ConfigChannel+0x688>
 800282a:	bf00      	nop
 800282c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	f003 021f 	and.w	r2, r3, #31
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	3b1e      	subs	r3, #30
 8002846:	051b      	lsls	r3, r3, #20
 8002848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002852:	4619      	mov	r1, r3
 8002854:	f7ff f87a 	bl	800194c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b44      	ldr	r3, [pc, #272]	; (8002970 <HAL_ADC_ConfigChannel+0x7c0>)
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d07a      	beq.n	800295a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002864:	4843      	ldr	r0, [pc, #268]	; (8002974 <HAL_ADC_ConfigChannel+0x7c4>)
 8002866:	f7fe ffcf 	bl	8001808 <LL_ADC_GetCommonPathInternalCh>
 800286a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a41      	ldr	r2, [pc, #260]	; (8002978 <HAL_ADC_ConfigChannel+0x7c8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d12c      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800287c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d126      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3c      	ldr	r2, [pc, #240]	; (800297c <HAL_ADC_ConfigChannel+0x7cc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x6e8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <HAL_ADC_ConfigChannel+0x7d0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d15d      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a0:	4619      	mov	r1, r3
 80028a2:	4834      	ldr	r0, [pc, #208]	; (8002974 <HAL_ADC_ConfigChannel+0x7c4>)
 80028a4:	f7fe ff9d 	bl	80017e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_ADC_ConfigChannel+0x7d4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	4a36      	ldr	r2, [pc, #216]	; (8002988 <HAL_ADC_ConfigChannel+0x7d8>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028c2:	e002      	b.n	80028ca <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028d0:	e040      	b.n	8002954 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2d      	ldr	r2, [pc, #180]	; (800298c <HAL_ADC_ConfigChannel+0x7dc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d118      	bne.n	800290e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d112      	bne.n	800290e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <HAL_ADC_ConfigChannel+0x7cc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d004      	beq.n	80028fc <HAL_ADC_ConfigChannel+0x74c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a22      	ldr	r2, [pc, #136]	; (8002980 <HAL_ADC_ConfigChannel+0x7d0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d12d      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002900:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002904:	4619      	mov	r1, r3
 8002906:	481b      	ldr	r0, [pc, #108]	; (8002974 <HAL_ADC_ConfigChannel+0x7c4>)
 8002908:	f7fe ff6b 	bl	80017e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800290c:	e024      	b.n	8002958 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_ADC_ConfigChannel+0x7e0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d120      	bne.n	800295a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800291c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11a      	bne.n	800295a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_ADC_ConfigChannel+0x7cc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d115      	bne.n	800295a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800292e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002936:	4619      	mov	r1, r3
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <HAL_ADC_ConfigChannel+0x7c4>)
 800293a:	f7fe ff52 	bl	80017e2 <LL_ADC_SetCommonPathInternalCh>
 800293e:	e00c      	b.n	800295a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002952:	e002      	b.n	800295a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002954:	bf00      	nop
 8002956:	e000      	b.n	800295a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002958:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002962:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002966:	4618      	mov	r0, r3
 8002968:	37d8      	adds	r7, #216	; 0xd8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	80080000 	.word	0x80080000
 8002974:	50040300 	.word	0x50040300
 8002978:	c7520000 	.word	0xc7520000
 800297c:	50040000 	.word	0x50040000
 8002980:	50040200 	.word	0x50040200
 8002984:	20000000 	.word	0x20000000
 8002988:	053e2d63 	.word	0x053e2d63
 800298c:	cb840000 	.word	0xcb840000
 8002990:	80000001 	.word	0x80000001

08002994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f8b3 	bl	8001b10 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d169      	bne.n	8002a84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <ADC_Enable+0xfc>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e055      	b.n	8002a86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff f86e 	bl	8001ac0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029e4:	482b      	ldr	r0, [pc, #172]	; (8002a94 <ADC_Enable+0x100>)
 80029e6:	f7fe ff0f 	bl	8001808 <LL_ADC_GetCommonPathInternalCh>
 80029ea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <ADC_Enable+0x104>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <ADC_Enable+0x108>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a0e:	e002      	b.n	8002a16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f9      	bne.n	8002a10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fe9e 	bl	800175c <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a22:	e028      	b.n	8002a76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f871 	bl	8001b10 <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f841 	bl	8001ac0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a3e:	f7fe fe8d 	bl	800175c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d914      	bls.n	8002a76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d00d      	beq.n	8002a76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f043 0210 	orr.w	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e007      	b.n	8002a86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d1cf      	bne.n	8002a24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	8000003f 	.word	0x8000003f
 8002a94:	50040300 	.word	0x50040300
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	053e2d63 	.word	0x053e2d63

08002aa0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff f842 	bl	8001b36 <LL_ADC_IsDisableOngoing>
 8002ab2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff f829 	bl	8001b10 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d047      	beq.n	8002b54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d144      	bne.n	8002b54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030d 	and.w	r3, r3, #13
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d10c      	bne.n	8002af2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f803 	bl	8001ae8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aea:	f7fe fe37 	bl	800175c <HAL_GetTick>
 8002aee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002af0:	e029      	b.n	8002b46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f043 0210 	orr.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e023      	b.n	8002b56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b0e:	f7fe fe25 	bl	800175c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d914      	bls.n	8002b46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1dc      	bne.n	8002b0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <LL_ADC_IsEnabled>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <LL_ADC_IsEnabled+0x18>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <LL_ADC_IsEnabled+0x1a>
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_StartCalibration>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_ADC_IsCalibrationOnGoing>:
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bca:	d101      	bne.n	8002bd0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_ADC_REG_IsConversionOngoing>:
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d101      	bne.n	8002bf6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADCEx_Calibration_Start+0x1c>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e04d      	b.n	8002cbc <HAL_ADCEx_Calibration_Start+0xb8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff39 	bl	8002aa0 <ADC_Disable>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d136      	bne.n	8002ca6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c40:	f023 0302 	bic.w	r3, r3, #2
 8002c44:	f043 0202 	orr.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6839      	ldr	r1, [r7, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff96 	bl	8002b84 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c58:	e014      	b.n	8002c84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002c66:	d30d      	bcc.n	8002c84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f023 0312 	bic.w	r3, r3, #18
 8002c70:	f043 0210 	orr.w	r2, r3, #16
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01b      	b.n	8002cbc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff94 	bl	8002bb6 <LL_ADC_IsCalibrationOnGoing>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e2      	bne.n	8002c5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f023 0303 	bic.w	r3, r3, #3
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ca4:	e005      	b.n	8002cb2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f043 0210 	orr.w	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b09f      	sub	sp, #124	; 0x7c
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e093      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002cea:	2300      	movs	r3, #0
 8002cec:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a47      	ldr	r2, [pc, #284]	; (8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d102      	bne.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cfc:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	e001      	b.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10b      	bne.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e072      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff59 	bl	8002bde <LL_ADC_REG_IsConversionOngoing>
 8002d2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff53 	bl	8002bde <LL_ADC_REG_IsConversionOngoing>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d154      	bne.n	8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d151      	bne.n	8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02c      	beq.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d62:	035b      	lsls	r3, r3, #13
 8002d64:	430b      	orrs	r3, r1
 8002d66:	431a      	orrs	r2, r3
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d6c:	4829      	ldr	r0, [pc, #164]	; (8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d6e:	f7ff fef6 	bl	8002b5e <LL_ADC_IsEnabled>
 8002d72:	4604      	mov	r4, r0
 8002d74:	4828      	ldr	r0, [pc, #160]	; (8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d76:	f7ff fef2 	bl	8002b5e <LL_ADC_IsEnabled>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	431c      	orrs	r4, r3
 8002d7e:	4828      	ldr	r0, [pc, #160]	; (8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d80:	f7ff feed 	bl	8002b5e <LL_ADC_IsEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4323      	orrs	r3, r4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d137      	bne.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d94:	f023 030f 	bic.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	6811      	ldr	r1, [r2, #0]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	6892      	ldr	r2, [r2, #8]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002da8:	e028      	b.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002db6:	4817      	ldr	r0, [pc, #92]	; (8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002db8:	f7ff fed1 	bl	8002b5e <LL_ADC_IsEnabled>
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	4816      	ldr	r0, [pc, #88]	; (8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dc0:	f7ff fecd 	bl	8002b5e <LL_ADC_IsEnabled>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	431c      	orrs	r4, r3
 8002dc8:	4815      	ldr	r0, [pc, #84]	; (8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002dca:	f7ff fec8 	bl	8002b5e <LL_ADC_IsEnabled>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4323      	orrs	r3, r4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d112      	bne.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dde:	f023 030f 	bic.w	r3, r3, #15
 8002de2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002de4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002de6:	e009      	b.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002dfa:	e000      	b.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	377c      	adds	r7, #124	; 0x7c
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	50040000 	.word	0x50040000
 8002e18:	50040100 	.word	0x50040100
 8002e1c:	50040300 	.word	0x50040300
 8002e20:	50040200 	.word	0x50040200

08002e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <__NVIC_SetPriorityGrouping+0x44>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e40:	4013      	ands	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <__NVIC_SetPriorityGrouping+0x44>)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	60d3      	str	r3, [r2, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <__NVIC_GetPriorityGrouping+0x18>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f003 0307 	and.w	r3, r3, #7
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	; (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f54:	d301      	bcc.n	8002f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00f      	b.n	8002f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <SysTick_Config+0x40>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f62:	210f      	movs	r1, #15
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f7ff ff8e 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <SysTick_Config+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <SysTick_Config+0x40>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff47 	bl	8002e24 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb0:	f7ff ff5c 	bl	8002e6c <__NVIC_GetPriorityGrouping>
 8002fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7ff ff8e 	bl	8002edc <NVIC_EncodePriority>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff5d 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ffb0 	bl	8002f44 <SysTick_Config>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffe:	e17f      	b.n	8003300 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2101      	movs	r1, #1
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	4013      	ands	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8171 	beq.w	80032fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d005      	beq.n	8003030 <HAL_GPIO_Init+0x40>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d130      	bne.n	8003092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003066:	2201      	movs	r2, #1
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 0201 	and.w	r2, r3, #1
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b03      	cmp	r3, #3
 800309c:	d118      	bne.n	80030d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030a4:	2201      	movs	r2, #1
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	08db      	lsrs	r3, r3, #3
 80030ba:	f003 0201 	and.w	r2, r3, #1
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d017      	beq.n	800310c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	2203      	movs	r2, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d123      	bne.n	8003160 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	08da      	lsrs	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3208      	adds	r2, #8
 800315a:	6939      	ldr	r1, [r7, #16]
 800315c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0203 	and.w	r2, r3, #3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80ac 	beq.w	80032fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <HAL_GPIO_Init+0x330>)
 80031a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a6:	4a5e      	ldr	r2, [pc, #376]	; (8003320 <HAL_GPIO_Init+0x330>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6613      	str	r3, [r2, #96]	; 0x60
 80031ae:	4b5c      	ldr	r3, [pc, #368]	; (8003320 <HAL_GPIO_Init+0x330>)
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ba:	4a5a      	ldr	r2, [pc, #360]	; (8003324 <HAL_GPIO_Init+0x334>)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	220f      	movs	r2, #15
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e4:	d025      	beq.n	8003232 <HAL_GPIO_Init+0x242>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4f      	ldr	r2, [pc, #316]	; (8003328 <HAL_GPIO_Init+0x338>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_Init+0x23e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4e      	ldr	r2, [pc, #312]	; (800332c <HAL_GPIO_Init+0x33c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x23a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4d      	ldr	r2, [pc, #308]	; (8003330 <HAL_GPIO_Init+0x340>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x236>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <HAL_GPIO_Init+0x344>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x232>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4b      	ldr	r2, [pc, #300]	; (8003338 <HAL_GPIO_Init+0x348>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x22e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4a      	ldr	r2, [pc, #296]	; (800333c <HAL_GPIO_Init+0x34c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x22a>
 8003216:	2306      	movs	r3, #6
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800321a:	2307      	movs	r3, #7
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x244>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x244>
 8003232:	2300      	movs	r3, #0
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003244:	4937      	ldr	r1, [pc, #220]	; (8003324 <HAL_GPIO_Init+0x334>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003252:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_GPIO_Init+0x350>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003276:	4a32      	ldr	r2, [pc, #200]	; (8003340 <HAL_GPIO_Init+0x350>)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800327c:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_GPIO_Init+0x350>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032a0:	4a27      	ldr	r2, [pc, #156]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032f4:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_GPIO_Init+0x350>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	f47f ae78 	bne.w	8003000 <HAL_GPIO_Init+0x10>
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	48000400 	.word	0x48000400
 800332c:	48000800 	.word	0x48000800
 8003330:	48000c00 	.word	0x48000c00
 8003334:	48001000 	.word	0x48001000
 8003338:	48001400 	.word	0x48001400
 800333c:	48001800 	.word	0x48001800
 8003340:	40010400 	.word	0x40010400

08003344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
 8003350:	4613      	mov	r3, r2
 8003352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003360:	e002      	b.n	8003368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e08d      	b.n	80034a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd ffec 	bl	8001378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	e006      	b.n	80033fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d108      	bne.n	8003416 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	e007      	b.n	8003426 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003438:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003448:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69d9      	ldr	r1, [r3, #28]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1a      	ldr	r2, [r3, #32]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d138      	bne.n	8003532 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e032      	b.n	8003534 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2224      	movs	r2, #36	; 0x24
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
  }
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b20      	cmp	r3, #32
 8003554:	d139      	bne.n	80035ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003560:	2302      	movs	r3, #2
 8003562:	e033      	b.n	80035cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003592:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40007000 	.word	0x40007000

080035f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003602:	d130      	bne.n	8003666 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003604:	4b23      	ldr	r3, [pc, #140]	; (8003694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800360c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003610:	d038      	beq.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003612:	4b20      	ldr	r3, [pc, #128]	; (8003694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800361a:	4a1e      	ldr	r2, [pc, #120]	; (8003694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003622:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2232      	movs	r2, #50	; 0x32
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	4a1b      	ldr	r2, [pc, #108]	; (800369c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0c9b      	lsrs	r3, r3, #18
 8003634:	3301      	adds	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003638:	e002      	b.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3b01      	subs	r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364c:	d102      	bne.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x60>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f2      	bne.n	800363a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d110      	bne.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e00f      	b.n	8003686 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003672:	d007      	beq.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800367c:	4a05      	ldr	r2, [pc, #20]	; (8003694 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003682:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40007000 	.word	0x40007000
 8003698:	20000000 	.word	0x20000000
 800369c:	431bde83 	.word	0x431bde83

080036a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e3ca      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b2:	4b97      	ldr	r3, [pc, #604]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036bc:	4b94      	ldr	r3, [pc, #592]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80e4 	beq.w	800389c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_RCC_OscConfig+0x4a>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	f040 808b 	bne.w	80037f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	f040 8087 	bne.w	80037f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036ea:	4b89      	ldr	r3, [pc, #548]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_RCC_OscConfig+0x62>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e3a2      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1a      	ldr	r2, [r3, #32]
 8003706:	4b82      	ldr	r3, [pc, #520]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_RCC_OscConfig+0x7c>
 8003712:	4b7f      	ldr	r3, [pc, #508]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371a:	e005      	b.n	8003728 <HAL_RCC_OscConfig+0x88>
 800371c:	4b7c      	ldr	r3, [pc, #496]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800371e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003728:	4293      	cmp	r3, r2
 800372a:	d223      	bcs.n	8003774 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fd1d 	bl	8004170 <RCC_SetFlashLatencyFromMSIRange>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e383      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003740:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a72      	ldr	r2, [pc, #456]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003746:	f043 0308 	orr.w	r3, r3, #8
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	496d      	ldr	r1, [pc, #436]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800375e:	4b6c      	ldr	r3, [pc, #432]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	4968      	ldr	r1, [pc, #416]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
 8003772:	e025      	b.n	80037c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003774:	4b66      	ldr	r3, [pc, #408]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a65      	ldr	r2, [pc, #404]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b63      	ldr	r3, [pc, #396]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4960      	ldr	r1, [pc, #384]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003792:	4b5f      	ldr	r3, [pc, #380]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	495b      	ldr	r1, [pc, #364]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fcdd 	bl	8004170 <RCC_SetFlashLatencyFromMSIRange>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e343      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037c0:	f000 fc4a 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b52      	ldr	r3, [pc, #328]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	4950      	ldr	r1, [pc, #320]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
 80037dc:	4a4e      	ldr	r2, [pc, #312]	; (8003918 <HAL_RCC_OscConfig+0x278>)
 80037de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037e0:	4b4e      	ldr	r3, [pc, #312]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd ff69 	bl	80016bc <HAL_InitTick>
 80037ea:	4603      	mov	r3, r0
 80037ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d052      	beq.n	800389a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	e327      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d032      	beq.n	8003866 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a42      	ldr	r2, [pc, #264]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800380c:	f7fd ffa6 	bl	800175c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003814:	f7fd ffa2 	bl	800175c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e310      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003826:	4b3a      	ldr	r3, [pc, #232]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a36      	ldr	r2, [pc, #216]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003838:	f043 0308 	orr.w	r3, r3, #8
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b34      	ldr	r3, [pc, #208]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	4931      	ldr	r1, [pc, #196]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800384c:	4313      	orrs	r3, r2
 800384e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003850:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	492c      	ldr	r1, [pc, #176]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
 8003864:	e01a      	b.n	800389c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a29      	ldr	r2, [pc, #164]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003872:	f7fd ff73 	bl	800175c <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800387a:	f7fd ff6f 	bl	800175c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e2dd      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f0      	bne.n	800387a <HAL_RCC_OscConfig+0x1da>
 8003898:	e000      	b.n	800389c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800389a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d074      	beq.n	8003992 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d005      	beq.n	80038ba <HAL_RCC_OscConfig+0x21a>
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b0c      	cmp	r3, #12
 80038b2:	d10e      	bne.n	80038d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d10b      	bne.n	80038d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d064      	beq.n	8003990 <HAL_RCC_OscConfig+0x2f0>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d160      	bne.n	8003990 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e2ba      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x24a>
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e026      	b.n	8003938 <HAL_RCC_OscConfig+0x298>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f2:	d115      	bne.n	8003920 <HAL_RCC_OscConfig+0x280>
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a05      	ldr	r2, [pc, #20]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 80038fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a02      	ldr	r2, [pc, #8]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e014      	b.n	8003938 <HAL_RCC_OscConfig+0x298>
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	08005f7c 	.word	0x08005f7c
 8003918:	20000000 	.word	0x20000000
 800391c:	20000004 	.word	0x20000004
 8003920:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a9f      	ldr	r2, [pc, #636]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b9d      	ldr	r3, [pc, #628]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a9c      	ldr	r2, [pc, #624]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd ff0c 	bl	800175c <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003948:	f7fd ff08 	bl	800175c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e276      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395a:	4b92      	ldr	r3, [pc, #584]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x2a8>
 8003966:	e014      	b.n	8003992 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fd fef8 	bl	800175c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fd fef4 	bl	800175c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e262      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003982:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x2d0>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d060      	beq.n	8003a60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_OscConfig+0x310>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d119      	bne.n	80039de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d116      	bne.n	80039de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b0:	4b7c      	ldr	r3, [pc, #496]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_OscConfig+0x328>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e23f      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	4973      	ldr	r1, [pc, #460]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039dc:	e040      	b.n	8003a60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d023      	beq.n	8003a2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e6:	4b6f      	ldr	r3, [pc, #444]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6e      	ldr	r2, [pc, #440]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fd feb3 	bl	800175c <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fa:	f7fd feaf 	bl	800175c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e21d      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0c:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a18:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	495f      	ldr	r1, [pc, #380]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
 8003a2c:	e018      	b.n	8003a60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a5c      	ldr	r2, [pc, #368]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fd fe8f 	bl	800175c <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fd fe8b 	bl	800175c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1f9      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d03c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01c      	beq.n	8003aae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fd fe6a 	bl	800175c <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fd fe66 	bl	800175c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1d4      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a9e:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ef      	beq.n	8003a8c <HAL_RCC_OscConfig+0x3ec>
 8003aac:	e01b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab4:	4a3b      	ldr	r2, [pc, #236]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fd fe4d 	bl	800175c <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac6:	f7fd fe49 	bl	800175c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e1b7      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ef      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80a6 	beq.w	8003c40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af4:	2300      	movs	r3, #0
 8003af6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003af8:	4b2a      	ldr	r3, [pc, #168]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b04:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b10:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <HAL_RCC_OscConfig+0x508>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d118      	bne.n	8003b5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <HAL_RCC_OscConfig+0x508>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_RCC_OscConfig+0x508>)
 8003b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b38:	f7fd fe10 	bl	800175c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b40:	f7fd fe0c 	bl	800175c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e17a      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCC_OscConfig+0x508>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d108      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4d8>
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b76:	e029      	b.n	8003bcc <HAL_RCC_OscConfig+0x52c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	d115      	bne.n	8003bac <HAL_RCC_OscConfig+0x50c>
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <HAL_RCC_OscConfig+0x504>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba0:	e014      	b.n	8003bcc <HAL_RCC_OscConfig+0x52c>
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	4b9c      	ldr	r3, [pc, #624]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	4a9b      	ldr	r2, [pc, #620]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bbc:	4b98      	ldr	r3, [pc, #608]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	4a97      	ldr	r2, [pc, #604]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d016      	beq.n	8003c02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd fdc2 	bl	800175c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fd fdbe 	bl	800175c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e12a      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf2:	4b8b      	ldr	r3, [pc, #556]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ed      	beq.n	8003bdc <HAL_RCC_OscConfig+0x53c>
 8003c00:	e015      	b.n	8003c2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fd fdab 	bl	800175c <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fd fda7 	bl	800175c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e113      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c20:	4b7f      	ldr	r3, [pc, #508]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ed      	bne.n	8003c0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c34:	4b7a      	ldr	r3, [pc, #488]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	4a79      	ldr	r2, [pc, #484]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80fe 	beq.w	8003e46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	f040 80d0 	bne.w	8003df4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c54:	4b72      	ldr	r3, [pc, #456]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0203 	and.w	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d130      	bne.n	8003cca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	3b01      	subs	r3, #1
 8003c74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d127      	bne.n	8003cca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d11f      	bne.n	8003cca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c94:	2a07      	cmp	r2, #7
 8003c96:	bf14      	ite	ne
 8003c98:	2201      	movne	r2, #1
 8003c9a:	2200      	moveq	r2, #0
 8003c9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d113      	bne.n	8003cca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	085b      	lsrs	r3, r3, #1
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d06e      	beq.n	8003da8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	d069      	beq.n	8003da4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cd0:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003cdc:	4b50      	ldr	r3, [pc, #320]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0ad      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cec:	4b4c      	ldr	r3, [pc, #304]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cf8:	f7fd fd30 	bl	800175c <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fd2c 	bl	800175c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e09a      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d12:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1e:	4b40      	ldr	r3, [pc, #256]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <HAL_RCC_OscConfig+0x784>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d2e:	3a01      	subs	r2, #1
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d38:	0212      	lsls	r2, r2, #8
 8003d3a:	4311      	orrs	r1, r2
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d40:	0852      	lsrs	r2, r2, #1
 8003d42:	3a01      	subs	r2, #1
 8003d44:	0552      	lsls	r2, r2, #21
 8003d46:	4311      	orrs	r1, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d4c:	0852      	lsrs	r2, r2, #1
 8003d4e:	3a01      	subs	r2, #1
 8003d50:	0652      	lsls	r2, r2, #25
 8003d52:	4311      	orrs	r1, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d58:	0912      	lsrs	r2, r2, #4
 8003d5a:	0452      	lsls	r2, r2, #17
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	4930      	ldr	r1, [pc, #192]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d64:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2d      	ldr	r2, [pc, #180]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d7c:	f7fd fcee 	bl	800175c <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd fcea 	bl	800175c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e058      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da2:	e050      	b.n	8003e46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e04f      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da8:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d148      	bne.n	8003e46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dcc:	f7fd fcc6 	bl	800175c <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fd fcc2 	bl	800175c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e030      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x734>
 8003df2:	e028      	b.n	8003e46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d023      	beq.n	8003e42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <HAL_RCC_OscConfig+0x780>)
 8003e00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd fca9 	bl	800175c <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	e00c      	b.n	8003e28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd fca5 	bl	800175c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d905      	bls.n	8003e28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e013      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
 8003e20:	40021000 	.word	0x40021000
 8003e24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_OscConfig+0x7b0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ec      	bne.n	8003e0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCC_OscConfig+0x7b0>)
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	4905      	ldr	r1, [pc, #20]	; (8003e50 <HAL_RCC_OscConfig+0x7b0>)
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_OscConfig+0x7b4>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
 8003e40:	e001      	b.n	8003e46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3720      	adds	r7, #32
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	feeefffc 	.word	0xfeeefffc

08003e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0e7      	b.n	800403c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b75      	ldr	r3, [pc, #468]	; (8004044 <HAL_RCC_ClockConfig+0x1ec>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d910      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b72      	ldr	r3, [pc, #456]	; (8004044 <HAL_RCC_ClockConfig+0x1ec>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 0207 	bic.w	r2, r3, #7
 8003e82:	4970      	ldr	r1, [pc, #448]	; (8004044 <HAL_RCC_ClockConfig+0x1ec>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b6e      	ldr	r3, [pc, #440]	; (8004044 <HAL_RCC_ClockConfig+0x1ec>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0cf      	b.n	800403c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d010      	beq.n	8003eca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4b66      	ldr	r3, [pc, #408]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d908      	bls.n	8003eca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4960      	ldr	r1, [pc, #384]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d04c      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	4b5a      	ldr	r3, [pc, #360]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d121      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0a6      	b.n	800403c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef6:	4b54      	ldr	r3, [pc, #336]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d115      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e09a      	b.n	800403c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f0e:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e08e      	b.n	800403c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f1e:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e086      	b.n	800403c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b46      	ldr	r3, [pc, #280]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4943      	ldr	r1, [pc, #268]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fd fc0c 	bl	800175c <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd fc08 	bl	800175c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e06e      	b.n	800403c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d010      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d208      	bcs.n	8003f9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	492b      	ldr	r1, [pc, #172]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f9e:	4b29      	ldr	r3, [pc, #164]	; (8004044 <HAL_RCC_ClockConfig+0x1ec>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d210      	bcs.n	8003fce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCC_ClockConfig+0x1ec>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f023 0207 	bic.w	r2, r3, #7
 8003fb4:	4923      	ldr	r1, [pc, #140]	; (8004044 <HAL_RCC_ClockConfig+0x1ec>)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbc:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_RCC_ClockConfig+0x1ec>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e036      	b.n	800403c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4918      	ldr	r1, [pc, #96]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff8:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4910      	ldr	r1, [pc, #64]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800400c:	f000 f824 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_RCC_ClockConfig+0x1f0>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	490b      	ldr	r1, [pc, #44]	; (800404c <HAL_RCC_ClockConfig+0x1f4>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x1f8>)
 800402a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1fc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd fb43 	bl	80016bc <HAL_InitTick>
 8004036:	4603      	mov	r3, r0
 8004038:	72fb      	strb	r3, [r7, #11]

  return status;
 800403a:	7afb      	ldrb	r3, [r7, #11]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40022000 	.word	0x40022000
 8004048:	40021000 	.word	0x40021000
 800404c:	08005f7c 	.word	0x08005f7c
 8004050:	20000000 	.word	0x20000000
 8004054:	20000004 	.word	0x20000004

08004058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	; 0x24
 800405c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004066:	4b3e      	ldr	r3, [pc, #248]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004070:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x34>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d121      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d11e      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800408c:	4b34      	ldr	r3, [pc, #208]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d107      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004098:	4b31      	ldr	r3, [pc, #196]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 800409a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e005      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040a8:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040b4:	4a2b      	ldr	r2, [pc, #172]	; (8004164 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10d      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d102      	bne.n	80040d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <HAL_RCC_GetSysClockFreq+0x110>)
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	e004      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040dc:	4b23      	ldr	r3, [pc, #140]	; (800416c <HAL_RCC_GetSysClockFreq+0x114>)
 80040de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d134      	bne.n	8004150 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d003      	beq.n	80040fe <HAL_RCC_GetSysClockFreq+0xa6>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d003      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0xac>
 80040fc:	e005      	b.n	800410a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040fe:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_RCC_GetSysClockFreq+0x110>)
 8004100:	617b      	str	r3, [r7, #20]
      break;
 8004102:	e005      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004104:	4b19      	ldr	r3, [pc, #100]	; (800416c <HAL_RCC_GetSysClockFreq+0x114>)
 8004106:	617b      	str	r3, [r7, #20]
      break;
 8004108:	e002      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	617b      	str	r3, [r7, #20]
      break;
 800410e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	3301      	adds	r3, #1
 800411c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	fb03 f202 	mul.w	r2, r3, r2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_RCC_GetSysClockFreq+0x108>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	0e5b      	lsrs	r3, r3, #25
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	3301      	adds	r3, #1
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004150:	69bb      	ldr	r3, [r7, #24]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	; 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
 8004164:	08005f8c 	.word	0x08005f8c
 8004168:	00f42400 	.word	0x00f42400
 800416c:	007a1200 	.word	0x007a1200

08004170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800417c:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004188:	f7ff fa26 	bl	80035d8 <HAL_PWREx_GetVoltageRange>
 800418c:	6178      	str	r0, [r7, #20]
 800418e:	e014      	b.n	80041ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	4a24      	ldr	r2, [pc, #144]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6593      	str	r3, [r2, #88]	; 0x58
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041a8:	f7ff fa16 	bl	80035d8 <HAL_PWREx_GetVoltageRange>
 80041ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c0:	d10b      	bne.n	80041da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d919      	bls.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2ba0      	cmp	r3, #160	; 0xa0
 80041cc:	d902      	bls.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ce:	2302      	movs	r3, #2
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	e013      	b.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041d4:	2301      	movs	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	e010      	b.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d902      	bls.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041e0:	2303      	movs	r3, #3
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e00a      	b.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d102      	bne.n	80041f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ec:	2302      	movs	r3, #2
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	e004      	b.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d101      	bne.n	80041fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f8:	2301      	movs	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 0207 	bic.w	r2, r3, #7
 8004204:	4909      	ldr	r1, [pc, #36]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000
 800422c:	40022000 	.word	0x40022000

08004230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004238:	2300      	movs	r3, #0
 800423a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800423c:	2300      	movs	r3, #0
 800423e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004248:	2b00      	cmp	r3, #0
 800424a:	d041      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004254:	d02a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004256:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800425a:	d824      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800425c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004260:	d008      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004266:	d81e      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800426c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004270:	d010      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004272:	e018      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004274:	4b86      	ldr	r3, [pc, #536]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a85      	ldr	r2, [pc, #532]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004280:	e015      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fabb 	bl	8004804 <RCCEx_PLLSAI1_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004292:	e00c      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3320      	adds	r3, #32
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fba6 	bl	80049ec <RCCEx_PLLSAI2_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a4:	e003      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	74fb      	strb	r3, [r7, #19]
      break;
 80042aa:	e000      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ae:	7cfb      	ldrb	r3, [r7, #19]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042b4:	4b76      	ldr	r3, [pc, #472]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c2:	4973      	ldr	r1, [pc, #460]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ca:	e001      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d041      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042e4:	d02a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042ea:	d824      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042f0:	d008      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042f6:	d81e      	bhi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004300:	d010      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004302:	e018      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004304:	4b62      	ldr	r3, [pc, #392]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a61      	ldr	r2, [pc, #388]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004310:	e015      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fa73 	bl	8004804 <RCCEx_PLLSAI1_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004322:	e00c      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3320      	adds	r3, #32
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fb5e 	bl	80049ec <RCCEx_PLLSAI2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	74fb      	strb	r3, [r7, #19]
      break;
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800433c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004344:	4b52      	ldr	r3, [pc, #328]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004352:	494f      	ldr	r1, [pc, #316]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800435a:	e001      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a0 	beq.w	80044ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004388:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	4a40      	ldr	r2, [pc, #256]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004392:	6593      	str	r3, [r2, #88]	; 0x58
 8004394:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a0:	2301      	movs	r3, #1
 80043a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a4:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a3a      	ldr	r2, [pc, #232]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043b0:	f7fd f9d4 	bl	800175c <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043b6:	e009      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fd f9d0 	bl	800175c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d902      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	74fb      	strb	r3, [r7, #19]
        break;
 80043ca:	e005      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043cc:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ef      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d15c      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043de:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01f      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d019      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043fc:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	4a20      	ldr	r2, [pc, #128]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fd f98f 	bl	800175c <HAL_GetTick>
 800443e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004440:	e00b      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fd f98b 	bl	800175c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d902      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	74fb      	strb	r3, [r7, #19]
            break;
 8004458:	e006      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ec      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447e:	4904      	ldr	r1, [pc, #16]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004486:	e009      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
 800448c:	e006      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449c:	7c7b      	ldrb	r3, [r7, #17]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a2:	4b9e      	ldr	r3, [pc, #632]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	4a9d      	ldr	r2, [pc, #628]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ba:	4b98      	ldr	r3, [pc, #608]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f023 0203 	bic.w	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	4994      	ldr	r1, [pc, #592]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044dc:	4b8f      	ldr	r3, [pc, #572]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f023 020c 	bic.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ea:	498c      	ldr	r1, [pc, #560]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044fe:	4b87      	ldr	r3, [pc, #540]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	4983      	ldr	r1, [pc, #524]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004520:	4b7e      	ldr	r3, [pc, #504]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	497b      	ldr	r1, [pc, #492]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004542:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004550:	4972      	ldr	r1, [pc, #456]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004564:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	496a      	ldr	r1, [pc, #424]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004586:	4b65      	ldr	r3, [pc, #404]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	4961      	ldr	r1, [pc, #388]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045a8:	4b5c      	ldr	r3, [pc, #368]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	4959      	ldr	r1, [pc, #356]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ca:	4b54      	ldr	r3, [pc, #336]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	4950      	ldr	r1, [pc, #320]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	4948      	ldr	r1, [pc, #288]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	493f      	ldr	r1, [pc, #252]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d028      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004630:	4b3a      	ldr	r3, [pc, #232]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463e:	4937      	ldr	r1, [pc, #220]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464e:	d106      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a31      	ldr	r2, [pc, #196]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465a:	60d3      	str	r3, [r2, #12]
 800465c:	e011      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004666:	d10c      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f8c8 	bl	8004804 <RCCEx_PLLSAI1_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d028      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	491f      	ldr	r1, [pc, #124]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ac:	d106      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	4a1a      	ldr	r2, [pc, #104]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b8:	60d3      	str	r3, [r2, #12]
 80046ba:	e011      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 f899 	bl	8004804 <RCCEx_PLLSAI1_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d02b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fa:	4908      	ldr	r1, [pc, #32]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470a:	d109      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a02      	ldr	r2, [pc, #8]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004716:	60d3      	str	r3, [r2, #12]
 8004718:	e014      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004728:	d10c      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3304      	adds	r3, #4
 800472e:	2101      	movs	r1, #1
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f867 	bl	8004804 <RCCEx_PLLSAI1_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02f      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004750:	4b2b      	ldr	r3, [pc, #172]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800475e:	4928      	ldr	r1, [pc, #160]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800476a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800476e:	d10d      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2102      	movs	r1, #2
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f844 	bl	8004804 <RCCEx_PLLSAI1_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d014      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	74bb      	strb	r3, [r7, #18]
 800478a:	e011      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3320      	adds	r3, #32
 800479a:	2102      	movs	r1, #2
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f925 	bl	80049ec <RCCEx_PLLSAI2_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047bc:	4b10      	ldr	r3, [pc, #64]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ca:	490d      	ldr	r1, [pc, #52]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ee:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000

08004804 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004812:	4b75      	ldr	r3, [pc, #468]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800481e:	4b72      	ldr	r3, [pc, #456]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0203 	and.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d10d      	bne.n	800484a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
       ||
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004836:	4b6c      	ldr	r3, [pc, #432]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
       ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d047      	beq.n	80048da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	e044      	b.n	80048da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d018      	beq.n	800488a <RCCEx_PLLSAI1_Config+0x86>
 8004858:	2b03      	cmp	r3, #3
 800485a:	d825      	bhi.n	80048a8 <RCCEx_PLLSAI1_Config+0xa4>
 800485c:	2b01      	cmp	r3, #1
 800485e:	d002      	beq.n	8004866 <RCCEx_PLLSAI1_Config+0x62>
 8004860:	2b02      	cmp	r3, #2
 8004862:	d009      	beq.n	8004878 <RCCEx_PLLSAI1_Config+0x74>
 8004864:	e020      	b.n	80048a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004866:	4b60      	ldr	r3, [pc, #384]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d11d      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004876:	e01a      	b.n	80048ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004878:	4b5b      	ldr	r3, [pc, #364]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d116      	bne.n	80048b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004888:	e013      	b.n	80048b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800488a:	4b57      	ldr	r3, [pc, #348]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10f      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004896:	4b54      	ldr	r3, [pc, #336]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048a6:	e006      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
      break;
 80048ac:	e004      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10d      	bne.n	80048da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048be:	4b4a      	ldr	r3, [pc, #296]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6819      	ldr	r1, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	430b      	orrs	r3, r1
 80048d4:	4944      	ldr	r1, [pc, #272]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d17d      	bne.n	80049dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a40      	ldr	r2, [pc, #256]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ec:	f7fc ff36 	bl	800175c <HAL_GetTick>
 80048f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048f2:	e009      	b.n	8004908 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f4:	f7fc ff32 	bl	800175c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d902      	bls.n	8004908 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	73fb      	strb	r3, [r7, #15]
        break;
 8004906:	e005      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004908:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ef      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d160      	bne.n	80049dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d111      	bne.n	8004944 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004920:	4b31      	ldr	r3, [pc, #196]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6892      	ldr	r2, [r2, #8]
 8004930:	0211      	lsls	r1, r2, #8
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	0912      	lsrs	r2, r2, #4
 8004938:	0452      	lsls	r2, r2, #17
 800493a:	430a      	orrs	r2, r1
 800493c:	492a      	ldr	r1, [pc, #168]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493e:	4313      	orrs	r3, r2
 8004940:	610b      	str	r3, [r1, #16]
 8004942:	e027      	b.n	8004994 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d112      	bne.n	8004970 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494a:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004952:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	0211      	lsls	r1, r2, #8
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6912      	ldr	r2, [r2, #16]
 8004960:	0852      	lsrs	r2, r2, #1
 8004962:	3a01      	subs	r2, #1
 8004964:	0552      	lsls	r2, r2, #21
 8004966:	430a      	orrs	r2, r1
 8004968:	491f      	ldr	r1, [pc, #124]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	610b      	str	r3, [r1, #16]
 800496e:	e011      	b.n	8004994 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6892      	ldr	r2, [r2, #8]
 8004980:	0211      	lsls	r1, r2, #8
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6952      	ldr	r2, [r2, #20]
 8004986:	0852      	lsrs	r2, r2, #1
 8004988:	3a01      	subs	r2, #1
 800498a:	0652      	lsls	r2, r2, #25
 800498c:	430a      	orrs	r2, r1
 800498e:	4916      	ldr	r1, [pc, #88]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800499e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fc fedc 	bl	800175c <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049a6:	e009      	b.n	80049bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049a8:	f7fc fed8 	bl	800175c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d902      	bls.n	80049bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	73fb      	strb	r3, [r7, #15]
          break;
 80049ba:	e005      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ef      	beq.n	80049a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4904      	ldr	r1, [pc, #16]	; (80049e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000

080049ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049fa:	4b6a      	ldr	r3, [pc, #424]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d018      	beq.n	8004a38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a06:	4b67      	ldr	r3, [pc, #412]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0203 	and.w	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d10d      	bne.n	8004a32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
       ||
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d009      	beq.n	8004a32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a1e:	4b61      	ldr	r3, [pc, #388]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d047      	beq.n	8004ac2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
 8004a36:	e044      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d018      	beq.n	8004a72 <RCCEx_PLLSAI2_Config+0x86>
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d825      	bhi.n	8004a90 <RCCEx_PLLSAI2_Config+0xa4>
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d002      	beq.n	8004a4e <RCCEx_PLLSAI2_Config+0x62>
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d009      	beq.n	8004a60 <RCCEx_PLLSAI2_Config+0x74>
 8004a4c:	e020      	b.n	8004a90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a4e:	4b55      	ldr	r3, [pc, #340]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d11d      	bne.n	8004a96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a5e:	e01a      	b.n	8004a96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a60:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d116      	bne.n	8004a9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a70:	e013      	b.n	8004a9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a72:	4b4c      	ldr	r3, [pc, #304]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a7e:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a8e:	e006      	b.n	8004a9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e004      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10d      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aa6:	4b3f      	ldr	r3, [pc, #252]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	430b      	orrs	r3, r1
 8004abc:	4939      	ldr	r1, [pc, #228]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d167      	bne.n	8004b98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ac8:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a35      	ldr	r2, [pc, #212]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fe42 	bl	800175c <HAL_GetTick>
 8004ad8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ada:	e009      	b.n	8004af0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004adc:	f7fc fe3e 	bl	800175c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d902      	bls.n	8004af0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	73fb      	strb	r3, [r7, #15]
        break;
 8004aee:	e005      	b.n	8004afc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004af0:	4b2c      	ldr	r3, [pc, #176]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ef      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d14a      	bne.n	8004b98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d111      	bne.n	8004b2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b08:	4b26      	ldr	r3, [pc, #152]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6892      	ldr	r2, [r2, #8]
 8004b18:	0211      	lsls	r1, r2, #8
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68d2      	ldr	r2, [r2, #12]
 8004b1e:	0912      	lsrs	r2, r2, #4
 8004b20:	0452      	lsls	r2, r2, #17
 8004b22:	430a      	orrs	r2, r1
 8004b24:	491f      	ldr	r1, [pc, #124]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	614b      	str	r3, [r1, #20]
 8004b2a:	e011      	b.n	8004b50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6892      	ldr	r2, [r2, #8]
 8004b3c:	0211      	lsls	r1, r2, #8
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6912      	ldr	r2, [r2, #16]
 8004b42:	0852      	lsrs	r2, r2, #1
 8004b44:	3a01      	subs	r2, #1
 8004b46:	0652      	lsls	r2, r2, #25
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	4916      	ldr	r1, [pc, #88]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b50:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fc fdfe 	bl	800175c <HAL_GetTick>
 8004b60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b62:	e009      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b64:	f7fc fdfa 	bl	800175c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d902      	bls.n	8004b78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	73fb      	strb	r3, [r7, #15]
          break;
 8004b76:	e005      	b.n	8004b84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ef      	beq.n	8004b64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	4904      	ldr	r1, [pc, #16]	; (8004ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000

08004ba8 <rand>:
 8004ba8:	4b16      	ldr	r3, [pc, #88]	; (8004c04 <rand+0x5c>)
 8004baa:	b510      	push	{r4, lr}
 8004bac:	681c      	ldr	r4, [r3, #0]
 8004bae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bb0:	b9b3      	cbnz	r3, 8004be0 <rand+0x38>
 8004bb2:	2018      	movs	r0, #24
 8004bb4:	f000 fa42 	bl	800503c <malloc>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6320      	str	r0, [r4, #48]	; 0x30
 8004bbc:	b920      	cbnz	r0, 8004bc8 <rand+0x20>
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <rand+0x60>)
 8004bc0:	4812      	ldr	r0, [pc, #72]	; (8004c0c <rand+0x64>)
 8004bc2:	2152      	movs	r1, #82	; 0x52
 8004bc4:	f000 f9d0 	bl	8004f68 <__assert_func>
 8004bc8:	4911      	ldr	r1, [pc, #68]	; (8004c10 <rand+0x68>)
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <rand+0x6c>)
 8004bcc:	e9c0 1300 	strd	r1, r3, [r0]
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <rand+0x70>)
 8004bd2:	6083      	str	r3, [r0, #8]
 8004bd4:	230b      	movs	r3, #11
 8004bd6:	8183      	strh	r3, [r0, #12]
 8004bd8:	2100      	movs	r1, #0
 8004bda:	2001      	movs	r0, #1
 8004bdc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004be0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004be2:	480e      	ldr	r0, [pc, #56]	; (8004c1c <rand+0x74>)
 8004be4:	690b      	ldr	r3, [r1, #16]
 8004be6:	694c      	ldr	r4, [r1, #20]
 8004be8:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <rand+0x78>)
 8004bea:	4358      	muls	r0, r3
 8004bec:	fb02 0004 	mla	r0, r2, r4, r0
 8004bf0:	fba3 3202 	umull	r3, r2, r3, r2
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	eb40 0002 	adc.w	r0, r0, r2
 8004bfa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004bfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c02:	bd10      	pop	{r4, pc}
 8004c04:	20000064 	.word	0x20000064
 8004c08:	08005fbc 	.word	0x08005fbc
 8004c0c:	08005fd3 	.word	0x08005fd3
 8004c10:	abcd330e 	.word	0xabcd330e
 8004c14:	e66d1234 	.word	0xe66d1234
 8004c18:	0005deec 	.word	0x0005deec
 8004c1c:	5851f42d 	.word	0x5851f42d
 8004c20:	4c957f2d 	.word	0x4c957f2d

08004c24 <std>:
 8004c24:	2300      	movs	r3, #0
 8004c26:	b510      	push	{r4, lr}
 8004c28:	4604      	mov	r4, r0
 8004c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c32:	6083      	str	r3, [r0, #8]
 8004c34:	8181      	strh	r1, [r0, #12]
 8004c36:	6643      	str	r3, [r0, #100]	; 0x64
 8004c38:	81c2      	strh	r2, [r0, #14]
 8004c3a:	6183      	str	r3, [r0, #24]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	2208      	movs	r2, #8
 8004c40:	305c      	adds	r0, #92	; 0x5c
 8004c42:	f000 f914 	bl	8004e6e <memset>
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <std+0x58>)
 8004c48:	6263      	str	r3, [r4, #36]	; 0x24
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <std+0x5c>)
 8004c4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <std+0x60>)
 8004c50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <std+0x64>)
 8004c54:	6323      	str	r3, [r4, #48]	; 0x30
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <std+0x68>)
 8004c58:	6224      	str	r4, [r4, #32]
 8004c5a:	429c      	cmp	r4, r3
 8004c5c:	d006      	beq.n	8004c6c <std+0x48>
 8004c5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c62:	4294      	cmp	r4, r2
 8004c64:	d002      	beq.n	8004c6c <std+0x48>
 8004c66:	33d0      	adds	r3, #208	; 0xd0
 8004c68:	429c      	cmp	r4, r3
 8004c6a:	d105      	bne.n	8004c78 <std+0x54>
 8004c6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c74:	f000 b974 	b.w	8004f60 <__retarget_lock_init_recursive>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	bf00      	nop
 8004c7c:	08004de9 	.word	0x08004de9
 8004c80:	08004e0b 	.word	0x08004e0b
 8004c84:	08004e43 	.word	0x08004e43
 8004c88:	08004e67 	.word	0x08004e67
 8004c8c:	2000029c 	.word	0x2000029c

08004c90 <stdio_exit_handler>:
 8004c90:	4a02      	ldr	r2, [pc, #8]	; (8004c9c <stdio_exit_handler+0xc>)
 8004c92:	4903      	ldr	r1, [pc, #12]	; (8004ca0 <stdio_exit_handler+0x10>)
 8004c94:	4803      	ldr	r0, [pc, #12]	; (8004ca4 <stdio_exit_handler+0x14>)
 8004c96:	f000 b869 	b.w	8004d6c <_fwalk_sglue>
 8004c9a:	bf00      	nop
 8004c9c:	2000000c 	.word	0x2000000c
 8004ca0:	08005881 	.word	0x08005881
 8004ca4:	20000018 	.word	0x20000018

08004ca8 <cleanup_stdio>:
 8004ca8:	6841      	ldr	r1, [r0, #4]
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <cleanup_stdio+0x34>)
 8004cac:	4299      	cmp	r1, r3
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	d001      	beq.n	8004cb8 <cleanup_stdio+0x10>
 8004cb4:	f000 fde4 	bl	8005880 <_fflush_r>
 8004cb8:	68a1      	ldr	r1, [r4, #8]
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <cleanup_stdio+0x38>)
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	d002      	beq.n	8004cc6 <cleanup_stdio+0x1e>
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f000 fddd 	bl	8005880 <_fflush_r>
 8004cc6:	68e1      	ldr	r1, [r4, #12]
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <cleanup_stdio+0x3c>)
 8004cca:	4299      	cmp	r1, r3
 8004ccc:	d004      	beq.n	8004cd8 <cleanup_stdio+0x30>
 8004cce:	4620      	mov	r0, r4
 8004cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd4:	f000 bdd4 	b.w	8005880 <_fflush_r>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	bf00      	nop
 8004cdc:	2000029c 	.word	0x2000029c
 8004ce0:	20000304 	.word	0x20000304
 8004ce4:	2000036c 	.word	0x2000036c

08004ce8 <global_stdio_init.part.0>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <global_stdio_init.part.0+0x30>)
 8004cec:	4c0b      	ldr	r4, [pc, #44]	; (8004d1c <global_stdio_init.part.0+0x34>)
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <global_stdio_init.part.0+0x38>)
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	f7ff ff94 	bl	8004c24 <std>
 8004cfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d00:	2201      	movs	r2, #1
 8004d02:	2109      	movs	r1, #9
 8004d04:	f7ff ff8e 	bl	8004c24 <std>
 8004d08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d12:	2112      	movs	r1, #18
 8004d14:	f7ff bf86 	b.w	8004c24 <std>
 8004d18:	200003d4 	.word	0x200003d4
 8004d1c:	2000029c 	.word	0x2000029c
 8004d20:	08004c91 	.word	0x08004c91

08004d24 <__sfp_lock_acquire>:
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <__sfp_lock_acquire+0x8>)
 8004d26:	f000 b91c 	b.w	8004f62 <__retarget_lock_acquire_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	200003dd 	.word	0x200003dd

08004d30 <__sfp_lock_release>:
 8004d30:	4801      	ldr	r0, [pc, #4]	; (8004d38 <__sfp_lock_release+0x8>)
 8004d32:	f000 b917 	b.w	8004f64 <__retarget_lock_release_recursive>
 8004d36:	bf00      	nop
 8004d38:	200003dd 	.word	0x200003dd

08004d3c <__sinit>:
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	4604      	mov	r4, r0
 8004d40:	f7ff fff0 	bl	8004d24 <__sfp_lock_acquire>
 8004d44:	6a23      	ldr	r3, [r4, #32]
 8004d46:	b11b      	cbz	r3, 8004d50 <__sinit+0x14>
 8004d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d4c:	f7ff bff0 	b.w	8004d30 <__sfp_lock_release>
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <__sinit+0x28>)
 8004d52:	6223      	str	r3, [r4, #32]
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <__sinit+0x2c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f5      	bne.n	8004d48 <__sinit+0xc>
 8004d5c:	f7ff ffc4 	bl	8004ce8 <global_stdio_init.part.0>
 8004d60:	e7f2      	b.n	8004d48 <__sinit+0xc>
 8004d62:	bf00      	nop
 8004d64:	08004ca9 	.word	0x08004ca9
 8004d68:	200003d4 	.word	0x200003d4

08004d6c <_fwalk_sglue>:
 8004d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d70:	4607      	mov	r7, r0
 8004d72:	4688      	mov	r8, r1
 8004d74:	4614      	mov	r4, r2
 8004d76:	2600      	movs	r6, #0
 8004d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d80:	d505      	bpl.n	8004d8e <_fwalk_sglue+0x22>
 8004d82:	6824      	ldr	r4, [r4, #0]
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	d1f7      	bne.n	8004d78 <_fwalk_sglue+0xc>
 8004d88:	4630      	mov	r0, r6
 8004d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d8e:	89ab      	ldrh	r3, [r5, #12]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d907      	bls.n	8004da4 <_fwalk_sglue+0x38>
 8004d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	d003      	beq.n	8004da4 <_fwalk_sglue+0x38>
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4638      	mov	r0, r7
 8004da0:	47c0      	blx	r8
 8004da2:	4306      	orrs	r6, r0
 8004da4:	3568      	adds	r5, #104	; 0x68
 8004da6:	e7e9      	b.n	8004d7c <_fwalk_sglue+0x10>

08004da8 <siprintf>:
 8004da8:	b40e      	push	{r1, r2, r3}
 8004daa:	b500      	push	{lr}
 8004dac:	b09c      	sub	sp, #112	; 0x70
 8004dae:	ab1d      	add	r3, sp, #116	; 0x74
 8004db0:	9002      	str	r0, [sp, #8]
 8004db2:	9006      	str	r0, [sp, #24]
 8004db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004db8:	4809      	ldr	r0, [pc, #36]	; (8004de0 <siprintf+0x38>)
 8004dba:	9107      	str	r1, [sp, #28]
 8004dbc:	9104      	str	r1, [sp, #16]
 8004dbe:	4909      	ldr	r1, [pc, #36]	; (8004de4 <siprintf+0x3c>)
 8004dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc4:	9105      	str	r1, [sp, #20]
 8004dc6:	6800      	ldr	r0, [r0, #0]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	a902      	add	r1, sp, #8
 8004dcc:	f000 fa44 	bl	8005258 <_svfiprintf_r>
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	b01c      	add	sp, #112	; 0x70
 8004dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ddc:	b003      	add	sp, #12
 8004dde:	4770      	bx	lr
 8004de0:	20000064 	.word	0x20000064
 8004de4:	ffff0208 	.word	0xffff0208

08004de8 <__sread>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	460c      	mov	r4, r1
 8004dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df0:	f000 f868 	bl	8004ec4 <_read_r>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	bfab      	itete	ge
 8004df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8004dfc:	181b      	addge	r3, r3, r0
 8004dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e02:	bfac      	ite	ge
 8004e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e06:	81a3      	strhlt	r3, [r4, #12]
 8004e08:	bd10      	pop	{r4, pc}

08004e0a <__swrite>:
 8004e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0e:	461f      	mov	r7, r3
 8004e10:	898b      	ldrh	r3, [r1, #12]
 8004e12:	05db      	lsls	r3, r3, #23
 8004e14:	4605      	mov	r5, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	4616      	mov	r6, r2
 8004e1a:	d505      	bpl.n	8004e28 <__swrite+0x1e>
 8004e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e20:	2302      	movs	r3, #2
 8004e22:	2200      	movs	r2, #0
 8004e24:	f000 f83c 	bl	8004ea0 <_lseek_r>
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	4632      	mov	r2, r6
 8004e36:	463b      	mov	r3, r7
 8004e38:	4628      	mov	r0, r5
 8004e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3e:	f000 b853 	b.w	8004ee8 <_write_r>

08004e42 <__sseek>:
 8004e42:	b510      	push	{r4, lr}
 8004e44:	460c      	mov	r4, r1
 8004e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4a:	f000 f829 	bl	8004ea0 <_lseek_r>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	bf15      	itete	ne
 8004e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e5e:	81a3      	strheq	r3, [r4, #12]
 8004e60:	bf18      	it	ne
 8004e62:	81a3      	strhne	r3, [r4, #12]
 8004e64:	bd10      	pop	{r4, pc}

08004e66 <__sclose>:
 8004e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6a:	f000 b809 	b.w	8004e80 <_close_r>

08004e6e <memset>:
 8004e6e:	4402      	add	r2, r0
 8004e70:	4603      	mov	r3, r0
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d100      	bne.n	8004e78 <memset+0xa>
 8004e76:	4770      	bx	lr
 8004e78:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7c:	e7f9      	b.n	8004e72 <memset+0x4>
	...

08004e80 <_close_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4d06      	ldr	r5, [pc, #24]	; (8004e9c <_close_r+0x1c>)
 8004e84:	2300      	movs	r3, #0
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	f7fc fb57 	bl	800153e <_close>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_close_r+0x1a>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_close_r+0x1a>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	200003d8 	.word	0x200003d8

08004ea0 <_lseek_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4d07      	ldr	r5, [pc, #28]	; (8004ec0 <_lseek_r+0x20>)
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	2200      	movs	r2, #0
 8004eac:	602a      	str	r2, [r5, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7fc fb6c 	bl	800158c <_lseek>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_lseek_r+0x1e>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_lseek_r+0x1e>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	200003d8 	.word	0x200003d8

08004ec4 <_read_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d07      	ldr	r5, [pc, #28]	; (8004ee4 <_read_r+0x20>)
 8004ec8:	4604      	mov	r4, r0
 8004eca:	4608      	mov	r0, r1
 8004ecc:	4611      	mov	r1, r2
 8004ece:	2200      	movs	r2, #0
 8004ed0:	602a      	str	r2, [r5, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7fc fafa 	bl	80014cc <_read>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_read_r+0x1e>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_read_r+0x1e>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	200003d8 	.word	0x200003d8

08004ee8 <_write_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d07      	ldr	r5, [pc, #28]	; (8004f08 <_write_r+0x20>)
 8004eec:	4604      	mov	r4, r0
 8004eee:	4608      	mov	r0, r1
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7fc fb05 	bl	8001506 <_write>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_write_r+0x1e>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_write_r+0x1e>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	200003d8 	.word	0x200003d8

08004f0c <__errno>:
 8004f0c:	4b01      	ldr	r3, [pc, #4]	; (8004f14 <__errno+0x8>)
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000064 	.word	0x20000064

08004f18 <__libc_init_array>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4d0d      	ldr	r5, [pc, #52]	; (8004f50 <__libc_init_array+0x38>)
 8004f1c:	4c0d      	ldr	r4, [pc, #52]	; (8004f54 <__libc_init_array+0x3c>)
 8004f1e:	1b64      	subs	r4, r4, r5
 8004f20:	10a4      	asrs	r4, r4, #2
 8004f22:	2600      	movs	r6, #0
 8004f24:	42a6      	cmp	r6, r4
 8004f26:	d109      	bne.n	8004f3c <__libc_init_array+0x24>
 8004f28:	4d0b      	ldr	r5, [pc, #44]	; (8004f58 <__libc_init_array+0x40>)
 8004f2a:	4c0c      	ldr	r4, [pc, #48]	; (8004f5c <__libc_init_array+0x44>)
 8004f2c:	f000 fffa 	bl	8005f24 <_init>
 8004f30:	1b64      	subs	r4, r4, r5
 8004f32:	10a4      	asrs	r4, r4, #2
 8004f34:	2600      	movs	r6, #0
 8004f36:	42a6      	cmp	r6, r4
 8004f38:	d105      	bne.n	8004f46 <__libc_init_array+0x2e>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f40:	4798      	blx	r3
 8004f42:	3601      	adds	r6, #1
 8004f44:	e7ee      	b.n	8004f24 <__libc_init_array+0xc>
 8004f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4a:	4798      	blx	r3
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	e7f2      	b.n	8004f36 <__libc_init_array+0x1e>
 8004f50:	0800609c 	.word	0x0800609c
 8004f54:	0800609c 	.word	0x0800609c
 8004f58:	0800609c 	.word	0x0800609c
 8004f5c:	080060a0 	.word	0x080060a0

08004f60 <__retarget_lock_init_recursive>:
 8004f60:	4770      	bx	lr

08004f62 <__retarget_lock_acquire_recursive>:
 8004f62:	4770      	bx	lr

08004f64 <__retarget_lock_release_recursive>:
 8004f64:	4770      	bx	lr
	...

08004f68 <__assert_func>:
 8004f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f6a:	4614      	mov	r4, r2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <__assert_func+0x2c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4605      	mov	r5, r0
 8004f74:	68d8      	ldr	r0, [r3, #12]
 8004f76:	b14c      	cbz	r4, 8004f8c <__assert_func+0x24>
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <__assert_func+0x30>)
 8004f7a:	9100      	str	r1, [sp, #0]
 8004f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f80:	4906      	ldr	r1, [pc, #24]	; (8004f9c <__assert_func+0x34>)
 8004f82:	462b      	mov	r3, r5
 8004f84:	f000 fca4 	bl	80058d0 <fiprintf>
 8004f88:	f000 fcec 	bl	8005964 <abort>
 8004f8c:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <__assert_func+0x38>)
 8004f8e:	461c      	mov	r4, r3
 8004f90:	e7f3      	b.n	8004f7a <__assert_func+0x12>
 8004f92:	bf00      	nop
 8004f94:	20000064 	.word	0x20000064
 8004f98:	0800602b 	.word	0x0800602b
 8004f9c:	08006038 	.word	0x08006038
 8004fa0:	08006066 	.word	0x08006066

08004fa4 <_free_r>:
 8004fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fa6:	2900      	cmp	r1, #0
 8004fa8:	d044      	beq.n	8005034 <_free_r+0x90>
 8004faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fb6:	bfb8      	it	lt
 8004fb8:	18e4      	addlt	r4, r4, r3
 8004fba:	f000 f8e7 	bl	800518c <__malloc_lock>
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <_free_r+0x94>)
 8004fc0:	9801      	ldr	r0, [sp, #4]
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	b933      	cbnz	r3, 8004fd4 <_free_r+0x30>
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	6014      	str	r4, [r2, #0]
 8004fca:	b003      	add	sp, #12
 8004fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fd0:	f000 b8e2 	b.w	8005198 <__malloc_unlock>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d908      	bls.n	8004fea <_free_r+0x46>
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	1961      	adds	r1, r4, r5
 8004fdc:	428b      	cmp	r3, r1
 8004fde:	bf01      	itttt	eq
 8004fe0:	6819      	ldreq	r1, [r3, #0]
 8004fe2:	685b      	ldreq	r3, [r3, #4]
 8004fe4:	1949      	addeq	r1, r1, r5
 8004fe6:	6021      	streq	r1, [r4, #0]
 8004fe8:	e7ed      	b.n	8004fc6 <_free_r+0x22>
 8004fea:	461a      	mov	r2, r3
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	b10b      	cbz	r3, 8004ff4 <_free_r+0x50>
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d9fa      	bls.n	8004fea <_free_r+0x46>
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	1855      	adds	r5, r2, r1
 8004ff8:	42a5      	cmp	r5, r4
 8004ffa:	d10b      	bne.n	8005014 <_free_r+0x70>
 8004ffc:	6824      	ldr	r4, [r4, #0]
 8004ffe:	4421      	add	r1, r4
 8005000:	1854      	adds	r4, r2, r1
 8005002:	42a3      	cmp	r3, r4
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	d1e0      	bne.n	8004fca <_free_r+0x26>
 8005008:	681c      	ldr	r4, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	6053      	str	r3, [r2, #4]
 800500e:	440c      	add	r4, r1
 8005010:	6014      	str	r4, [r2, #0]
 8005012:	e7da      	b.n	8004fca <_free_r+0x26>
 8005014:	d902      	bls.n	800501c <_free_r+0x78>
 8005016:	230c      	movs	r3, #12
 8005018:	6003      	str	r3, [r0, #0]
 800501a:	e7d6      	b.n	8004fca <_free_r+0x26>
 800501c:	6825      	ldr	r5, [r4, #0]
 800501e:	1961      	adds	r1, r4, r5
 8005020:	428b      	cmp	r3, r1
 8005022:	bf04      	itt	eq
 8005024:	6819      	ldreq	r1, [r3, #0]
 8005026:	685b      	ldreq	r3, [r3, #4]
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	bf04      	itt	eq
 800502c:	1949      	addeq	r1, r1, r5
 800502e:	6021      	streq	r1, [r4, #0]
 8005030:	6054      	str	r4, [r2, #4]
 8005032:	e7ca      	b.n	8004fca <_free_r+0x26>
 8005034:	b003      	add	sp, #12
 8005036:	bd30      	pop	{r4, r5, pc}
 8005038:	200003e0 	.word	0x200003e0

0800503c <malloc>:
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <malloc+0xc>)
 800503e:	4601      	mov	r1, r0
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f000 b823 	b.w	800508c <_malloc_r>
 8005046:	bf00      	nop
 8005048:	20000064 	.word	0x20000064

0800504c <sbrk_aligned>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4e0e      	ldr	r6, [pc, #56]	; (8005088 <sbrk_aligned+0x3c>)
 8005050:	460c      	mov	r4, r1
 8005052:	6831      	ldr	r1, [r6, #0]
 8005054:	4605      	mov	r5, r0
 8005056:	b911      	cbnz	r1, 800505e <sbrk_aligned+0x12>
 8005058:	f000 fc66 	bl	8005928 <_sbrk_r>
 800505c:	6030      	str	r0, [r6, #0]
 800505e:	4621      	mov	r1, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f000 fc61 	bl	8005928 <_sbrk_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	d00a      	beq.n	8005080 <sbrk_aligned+0x34>
 800506a:	1cc4      	adds	r4, r0, #3
 800506c:	f024 0403 	bic.w	r4, r4, #3
 8005070:	42a0      	cmp	r0, r4
 8005072:	d007      	beq.n	8005084 <sbrk_aligned+0x38>
 8005074:	1a21      	subs	r1, r4, r0
 8005076:	4628      	mov	r0, r5
 8005078:	f000 fc56 	bl	8005928 <_sbrk_r>
 800507c:	3001      	adds	r0, #1
 800507e:	d101      	bne.n	8005084 <sbrk_aligned+0x38>
 8005080:	f04f 34ff 	mov.w	r4, #4294967295
 8005084:	4620      	mov	r0, r4
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	200003e4 	.word	0x200003e4

0800508c <_malloc_r>:
 800508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005090:	1ccd      	adds	r5, r1, #3
 8005092:	f025 0503 	bic.w	r5, r5, #3
 8005096:	3508      	adds	r5, #8
 8005098:	2d0c      	cmp	r5, #12
 800509a:	bf38      	it	cc
 800509c:	250c      	movcc	r5, #12
 800509e:	2d00      	cmp	r5, #0
 80050a0:	4607      	mov	r7, r0
 80050a2:	db01      	blt.n	80050a8 <_malloc_r+0x1c>
 80050a4:	42a9      	cmp	r1, r5
 80050a6:	d905      	bls.n	80050b4 <_malloc_r+0x28>
 80050a8:	230c      	movs	r3, #12
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	2600      	movs	r6, #0
 80050ae:	4630      	mov	r0, r6
 80050b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005188 <_malloc_r+0xfc>
 80050b8:	f000 f868 	bl	800518c <__malloc_lock>
 80050bc:	f8d8 3000 	ldr.w	r3, [r8]
 80050c0:	461c      	mov	r4, r3
 80050c2:	bb5c      	cbnz	r4, 800511c <_malloc_r+0x90>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	f7ff ffc0 	bl	800504c <sbrk_aligned>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	4604      	mov	r4, r0
 80050d0:	d155      	bne.n	800517e <_malloc_r+0xf2>
 80050d2:	f8d8 4000 	ldr.w	r4, [r8]
 80050d6:	4626      	mov	r6, r4
 80050d8:	2e00      	cmp	r6, #0
 80050da:	d145      	bne.n	8005168 <_malloc_r+0xdc>
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d048      	beq.n	8005172 <_malloc_r+0xe6>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	4631      	mov	r1, r6
 80050e4:	4638      	mov	r0, r7
 80050e6:	eb04 0903 	add.w	r9, r4, r3
 80050ea:	f000 fc1d 	bl	8005928 <_sbrk_r>
 80050ee:	4581      	cmp	r9, r0
 80050f0:	d13f      	bne.n	8005172 <_malloc_r+0xe6>
 80050f2:	6821      	ldr	r1, [r4, #0]
 80050f4:	1a6d      	subs	r5, r5, r1
 80050f6:	4629      	mov	r1, r5
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7ff ffa7 	bl	800504c <sbrk_aligned>
 80050fe:	3001      	adds	r0, #1
 8005100:	d037      	beq.n	8005172 <_malloc_r+0xe6>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	442b      	add	r3, r5
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	f8d8 3000 	ldr.w	r3, [r8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d038      	beq.n	8005182 <_malloc_r+0xf6>
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	42a2      	cmp	r2, r4
 8005114:	d12b      	bne.n	800516e <_malloc_r+0xe2>
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	e00f      	b.n	800513c <_malloc_r+0xb0>
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	1b52      	subs	r2, r2, r5
 8005120:	d41f      	bmi.n	8005162 <_malloc_r+0xd6>
 8005122:	2a0b      	cmp	r2, #11
 8005124:	d917      	bls.n	8005156 <_malloc_r+0xca>
 8005126:	1961      	adds	r1, r4, r5
 8005128:	42a3      	cmp	r3, r4
 800512a:	6025      	str	r5, [r4, #0]
 800512c:	bf18      	it	ne
 800512e:	6059      	strne	r1, [r3, #4]
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	bf08      	it	eq
 8005134:	f8c8 1000 	streq.w	r1, [r8]
 8005138:	5162      	str	r2, [r4, r5]
 800513a:	604b      	str	r3, [r1, #4]
 800513c:	4638      	mov	r0, r7
 800513e:	f104 060b 	add.w	r6, r4, #11
 8005142:	f000 f829 	bl	8005198 <__malloc_unlock>
 8005146:	f026 0607 	bic.w	r6, r6, #7
 800514a:	1d23      	adds	r3, r4, #4
 800514c:	1af2      	subs	r2, r6, r3
 800514e:	d0ae      	beq.n	80050ae <_malloc_r+0x22>
 8005150:	1b9b      	subs	r3, r3, r6
 8005152:	50a3      	str	r3, [r4, r2]
 8005154:	e7ab      	b.n	80050ae <_malloc_r+0x22>
 8005156:	42a3      	cmp	r3, r4
 8005158:	6862      	ldr	r2, [r4, #4]
 800515a:	d1dd      	bne.n	8005118 <_malloc_r+0x8c>
 800515c:	f8c8 2000 	str.w	r2, [r8]
 8005160:	e7ec      	b.n	800513c <_malloc_r+0xb0>
 8005162:	4623      	mov	r3, r4
 8005164:	6864      	ldr	r4, [r4, #4]
 8005166:	e7ac      	b.n	80050c2 <_malloc_r+0x36>
 8005168:	4634      	mov	r4, r6
 800516a:	6876      	ldr	r6, [r6, #4]
 800516c:	e7b4      	b.n	80050d8 <_malloc_r+0x4c>
 800516e:	4613      	mov	r3, r2
 8005170:	e7cc      	b.n	800510c <_malloc_r+0x80>
 8005172:	230c      	movs	r3, #12
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	4638      	mov	r0, r7
 8005178:	f000 f80e 	bl	8005198 <__malloc_unlock>
 800517c:	e797      	b.n	80050ae <_malloc_r+0x22>
 800517e:	6025      	str	r5, [r4, #0]
 8005180:	e7dc      	b.n	800513c <_malloc_r+0xb0>
 8005182:	605b      	str	r3, [r3, #4]
 8005184:	deff      	udf	#255	; 0xff
 8005186:	bf00      	nop
 8005188:	200003e0 	.word	0x200003e0

0800518c <__malloc_lock>:
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <__malloc_lock+0x8>)
 800518e:	f7ff bee8 	b.w	8004f62 <__retarget_lock_acquire_recursive>
 8005192:	bf00      	nop
 8005194:	200003dc 	.word	0x200003dc

08005198 <__malloc_unlock>:
 8005198:	4801      	ldr	r0, [pc, #4]	; (80051a0 <__malloc_unlock+0x8>)
 800519a:	f7ff bee3 	b.w	8004f64 <__retarget_lock_release_recursive>
 800519e:	bf00      	nop
 80051a0:	200003dc 	.word	0x200003dc

080051a4 <__ssputs_r>:
 80051a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a8:	688e      	ldr	r6, [r1, #8]
 80051aa:	461f      	mov	r7, r3
 80051ac:	42be      	cmp	r6, r7
 80051ae:	680b      	ldr	r3, [r1, #0]
 80051b0:	4682      	mov	sl, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	4690      	mov	r8, r2
 80051b6:	d82c      	bhi.n	8005212 <__ssputs_r+0x6e>
 80051b8:	898a      	ldrh	r2, [r1, #12]
 80051ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051be:	d026      	beq.n	800520e <__ssputs_r+0x6a>
 80051c0:	6965      	ldr	r5, [r4, #20]
 80051c2:	6909      	ldr	r1, [r1, #16]
 80051c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051c8:	eba3 0901 	sub.w	r9, r3, r1
 80051cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051d0:	1c7b      	adds	r3, r7, #1
 80051d2:	444b      	add	r3, r9
 80051d4:	106d      	asrs	r5, r5, #1
 80051d6:	429d      	cmp	r5, r3
 80051d8:	bf38      	it	cc
 80051da:	461d      	movcc	r5, r3
 80051dc:	0553      	lsls	r3, r2, #21
 80051de:	d527      	bpl.n	8005230 <__ssputs_r+0x8c>
 80051e0:	4629      	mov	r1, r5
 80051e2:	f7ff ff53 	bl	800508c <_malloc_r>
 80051e6:	4606      	mov	r6, r0
 80051e8:	b360      	cbz	r0, 8005244 <__ssputs_r+0xa0>
 80051ea:	6921      	ldr	r1, [r4, #16]
 80051ec:	464a      	mov	r2, r9
 80051ee:	f000 fbab 	bl	8005948 <memcpy>
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	6126      	str	r6, [r4, #16]
 8005200:	6165      	str	r5, [r4, #20]
 8005202:	444e      	add	r6, r9
 8005204:	eba5 0509 	sub.w	r5, r5, r9
 8005208:	6026      	str	r6, [r4, #0]
 800520a:	60a5      	str	r5, [r4, #8]
 800520c:	463e      	mov	r6, r7
 800520e:	42be      	cmp	r6, r7
 8005210:	d900      	bls.n	8005214 <__ssputs_r+0x70>
 8005212:	463e      	mov	r6, r7
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	4632      	mov	r2, r6
 8005218:	4641      	mov	r1, r8
 800521a:	f000 fb6b 	bl	80058f4 <memmove>
 800521e:	68a3      	ldr	r3, [r4, #8]
 8005220:	1b9b      	subs	r3, r3, r6
 8005222:	60a3      	str	r3, [r4, #8]
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	4433      	add	r3, r6
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	2000      	movs	r0, #0
 800522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005230:	462a      	mov	r2, r5
 8005232:	f000 fb9e 	bl	8005972 <_realloc_r>
 8005236:	4606      	mov	r6, r0
 8005238:	2800      	cmp	r0, #0
 800523a:	d1e0      	bne.n	80051fe <__ssputs_r+0x5a>
 800523c:	6921      	ldr	r1, [r4, #16]
 800523e:	4650      	mov	r0, sl
 8005240:	f7ff feb0 	bl	8004fa4 <_free_r>
 8005244:	230c      	movs	r3, #12
 8005246:	f8ca 3000 	str.w	r3, [sl]
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	f04f 30ff 	mov.w	r0, #4294967295
 8005256:	e7e9      	b.n	800522c <__ssputs_r+0x88>

08005258 <_svfiprintf_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	4698      	mov	r8, r3
 800525e:	898b      	ldrh	r3, [r1, #12]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	b09d      	sub	sp, #116	; 0x74
 8005264:	4607      	mov	r7, r0
 8005266:	460d      	mov	r5, r1
 8005268:	4614      	mov	r4, r2
 800526a:	d50e      	bpl.n	800528a <_svfiprintf_r+0x32>
 800526c:	690b      	ldr	r3, [r1, #16]
 800526e:	b963      	cbnz	r3, 800528a <_svfiprintf_r+0x32>
 8005270:	2140      	movs	r1, #64	; 0x40
 8005272:	f7ff ff0b 	bl	800508c <_malloc_r>
 8005276:	6028      	str	r0, [r5, #0]
 8005278:	6128      	str	r0, [r5, #16]
 800527a:	b920      	cbnz	r0, 8005286 <_svfiprintf_r+0x2e>
 800527c:	230c      	movs	r3, #12
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	e0d0      	b.n	8005428 <_svfiprintf_r+0x1d0>
 8005286:	2340      	movs	r3, #64	; 0x40
 8005288:	616b      	str	r3, [r5, #20]
 800528a:	2300      	movs	r3, #0
 800528c:	9309      	str	r3, [sp, #36]	; 0x24
 800528e:	2320      	movs	r3, #32
 8005290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005294:	f8cd 800c 	str.w	r8, [sp, #12]
 8005298:	2330      	movs	r3, #48	; 0x30
 800529a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005440 <_svfiprintf_r+0x1e8>
 800529e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052a2:	f04f 0901 	mov.w	r9, #1
 80052a6:	4623      	mov	r3, r4
 80052a8:	469a      	mov	sl, r3
 80052aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ae:	b10a      	cbz	r2, 80052b4 <_svfiprintf_r+0x5c>
 80052b0:	2a25      	cmp	r2, #37	; 0x25
 80052b2:	d1f9      	bne.n	80052a8 <_svfiprintf_r+0x50>
 80052b4:	ebba 0b04 	subs.w	fp, sl, r4
 80052b8:	d00b      	beq.n	80052d2 <_svfiprintf_r+0x7a>
 80052ba:	465b      	mov	r3, fp
 80052bc:	4622      	mov	r2, r4
 80052be:	4629      	mov	r1, r5
 80052c0:	4638      	mov	r0, r7
 80052c2:	f7ff ff6f 	bl	80051a4 <__ssputs_r>
 80052c6:	3001      	adds	r0, #1
 80052c8:	f000 80a9 	beq.w	800541e <_svfiprintf_r+0x1c6>
 80052cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ce:	445a      	add	r2, fp
 80052d0:	9209      	str	r2, [sp, #36]	; 0x24
 80052d2:	f89a 3000 	ldrb.w	r3, [sl]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 80a1 	beq.w	800541e <_svfiprintf_r+0x1c6>
 80052dc:	2300      	movs	r3, #0
 80052de:	f04f 32ff 	mov.w	r2, #4294967295
 80052e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052e6:	f10a 0a01 	add.w	sl, sl, #1
 80052ea:	9304      	str	r3, [sp, #16]
 80052ec:	9307      	str	r3, [sp, #28]
 80052ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052f2:	931a      	str	r3, [sp, #104]	; 0x68
 80052f4:	4654      	mov	r4, sl
 80052f6:	2205      	movs	r2, #5
 80052f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fc:	4850      	ldr	r0, [pc, #320]	; (8005440 <_svfiprintf_r+0x1e8>)
 80052fe:	f7fa ff67 	bl	80001d0 <memchr>
 8005302:	9a04      	ldr	r2, [sp, #16]
 8005304:	b9d8      	cbnz	r0, 800533e <_svfiprintf_r+0xe6>
 8005306:	06d0      	lsls	r0, r2, #27
 8005308:	bf44      	itt	mi
 800530a:	2320      	movmi	r3, #32
 800530c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005310:	0711      	lsls	r1, r2, #28
 8005312:	bf44      	itt	mi
 8005314:	232b      	movmi	r3, #43	; 0x2b
 8005316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800531a:	f89a 3000 	ldrb.w	r3, [sl]
 800531e:	2b2a      	cmp	r3, #42	; 0x2a
 8005320:	d015      	beq.n	800534e <_svfiprintf_r+0xf6>
 8005322:	9a07      	ldr	r2, [sp, #28]
 8005324:	4654      	mov	r4, sl
 8005326:	2000      	movs	r0, #0
 8005328:	f04f 0c0a 	mov.w	ip, #10
 800532c:	4621      	mov	r1, r4
 800532e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005332:	3b30      	subs	r3, #48	; 0x30
 8005334:	2b09      	cmp	r3, #9
 8005336:	d94d      	bls.n	80053d4 <_svfiprintf_r+0x17c>
 8005338:	b1b0      	cbz	r0, 8005368 <_svfiprintf_r+0x110>
 800533a:	9207      	str	r2, [sp, #28]
 800533c:	e014      	b.n	8005368 <_svfiprintf_r+0x110>
 800533e:	eba0 0308 	sub.w	r3, r0, r8
 8005342:	fa09 f303 	lsl.w	r3, r9, r3
 8005346:	4313      	orrs	r3, r2
 8005348:	9304      	str	r3, [sp, #16]
 800534a:	46a2      	mov	sl, r4
 800534c:	e7d2      	b.n	80052f4 <_svfiprintf_r+0x9c>
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	1d19      	adds	r1, r3, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	9103      	str	r1, [sp, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	bfbb      	ittet	lt
 800535a:	425b      	neglt	r3, r3
 800535c:	f042 0202 	orrlt.w	r2, r2, #2
 8005360:	9307      	strge	r3, [sp, #28]
 8005362:	9307      	strlt	r3, [sp, #28]
 8005364:	bfb8      	it	lt
 8005366:	9204      	strlt	r2, [sp, #16]
 8005368:	7823      	ldrb	r3, [r4, #0]
 800536a:	2b2e      	cmp	r3, #46	; 0x2e
 800536c:	d10c      	bne.n	8005388 <_svfiprintf_r+0x130>
 800536e:	7863      	ldrb	r3, [r4, #1]
 8005370:	2b2a      	cmp	r3, #42	; 0x2a
 8005372:	d134      	bne.n	80053de <_svfiprintf_r+0x186>
 8005374:	9b03      	ldr	r3, [sp, #12]
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	9203      	str	r2, [sp, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	bfb8      	it	lt
 8005380:	f04f 33ff 	movlt.w	r3, #4294967295
 8005384:	3402      	adds	r4, #2
 8005386:	9305      	str	r3, [sp, #20]
 8005388:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005450 <_svfiprintf_r+0x1f8>
 800538c:	7821      	ldrb	r1, [r4, #0]
 800538e:	2203      	movs	r2, #3
 8005390:	4650      	mov	r0, sl
 8005392:	f7fa ff1d 	bl	80001d0 <memchr>
 8005396:	b138      	cbz	r0, 80053a8 <_svfiprintf_r+0x150>
 8005398:	9b04      	ldr	r3, [sp, #16]
 800539a:	eba0 000a 	sub.w	r0, r0, sl
 800539e:	2240      	movs	r2, #64	; 0x40
 80053a0:	4082      	lsls	r2, r0
 80053a2:	4313      	orrs	r3, r2
 80053a4:	3401      	adds	r4, #1
 80053a6:	9304      	str	r3, [sp, #16]
 80053a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ac:	4825      	ldr	r0, [pc, #148]	; (8005444 <_svfiprintf_r+0x1ec>)
 80053ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053b2:	2206      	movs	r2, #6
 80053b4:	f7fa ff0c 	bl	80001d0 <memchr>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d038      	beq.n	800542e <_svfiprintf_r+0x1d6>
 80053bc:	4b22      	ldr	r3, [pc, #136]	; (8005448 <_svfiprintf_r+0x1f0>)
 80053be:	bb1b      	cbnz	r3, 8005408 <_svfiprintf_r+0x1b0>
 80053c0:	9b03      	ldr	r3, [sp, #12]
 80053c2:	3307      	adds	r3, #7
 80053c4:	f023 0307 	bic.w	r3, r3, #7
 80053c8:	3308      	adds	r3, #8
 80053ca:	9303      	str	r3, [sp, #12]
 80053cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ce:	4433      	add	r3, r6
 80053d0:	9309      	str	r3, [sp, #36]	; 0x24
 80053d2:	e768      	b.n	80052a6 <_svfiprintf_r+0x4e>
 80053d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80053d8:	460c      	mov	r4, r1
 80053da:	2001      	movs	r0, #1
 80053dc:	e7a6      	b.n	800532c <_svfiprintf_r+0xd4>
 80053de:	2300      	movs	r3, #0
 80053e0:	3401      	adds	r4, #1
 80053e2:	9305      	str	r3, [sp, #20]
 80053e4:	4619      	mov	r1, r3
 80053e6:	f04f 0c0a 	mov.w	ip, #10
 80053ea:	4620      	mov	r0, r4
 80053ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053f0:	3a30      	subs	r2, #48	; 0x30
 80053f2:	2a09      	cmp	r2, #9
 80053f4:	d903      	bls.n	80053fe <_svfiprintf_r+0x1a6>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0c6      	beq.n	8005388 <_svfiprintf_r+0x130>
 80053fa:	9105      	str	r1, [sp, #20]
 80053fc:	e7c4      	b.n	8005388 <_svfiprintf_r+0x130>
 80053fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005402:	4604      	mov	r4, r0
 8005404:	2301      	movs	r3, #1
 8005406:	e7f0      	b.n	80053ea <_svfiprintf_r+0x192>
 8005408:	ab03      	add	r3, sp, #12
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	462a      	mov	r2, r5
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <_svfiprintf_r+0x1f4>)
 8005410:	a904      	add	r1, sp, #16
 8005412:	4638      	mov	r0, r7
 8005414:	f3af 8000 	nop.w
 8005418:	1c42      	adds	r2, r0, #1
 800541a:	4606      	mov	r6, r0
 800541c:	d1d6      	bne.n	80053cc <_svfiprintf_r+0x174>
 800541e:	89ab      	ldrh	r3, [r5, #12]
 8005420:	065b      	lsls	r3, r3, #25
 8005422:	f53f af2d 	bmi.w	8005280 <_svfiprintf_r+0x28>
 8005426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005428:	b01d      	add	sp, #116	; 0x74
 800542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <_svfiprintf_r+0x1f4>)
 8005436:	a904      	add	r1, sp, #16
 8005438:	4638      	mov	r0, r7
 800543a:	f000 f879 	bl	8005530 <_printf_i>
 800543e:	e7eb      	b.n	8005418 <_svfiprintf_r+0x1c0>
 8005440:	08006067 	.word	0x08006067
 8005444:	08006071 	.word	0x08006071
 8005448:	00000000 	.word	0x00000000
 800544c:	080051a5 	.word	0x080051a5
 8005450:	0800606d 	.word	0x0800606d

08005454 <_printf_common>:
 8005454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	4616      	mov	r6, r2
 800545a:	4699      	mov	r9, r3
 800545c:	688a      	ldr	r2, [r1, #8]
 800545e:	690b      	ldr	r3, [r1, #16]
 8005460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005464:	4293      	cmp	r3, r2
 8005466:	bfb8      	it	lt
 8005468:	4613      	movlt	r3, r2
 800546a:	6033      	str	r3, [r6, #0]
 800546c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005470:	4607      	mov	r7, r0
 8005472:	460c      	mov	r4, r1
 8005474:	b10a      	cbz	r2, 800547a <_printf_common+0x26>
 8005476:	3301      	adds	r3, #1
 8005478:	6033      	str	r3, [r6, #0]
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	0699      	lsls	r1, r3, #26
 800547e:	bf42      	ittt	mi
 8005480:	6833      	ldrmi	r3, [r6, #0]
 8005482:	3302      	addmi	r3, #2
 8005484:	6033      	strmi	r3, [r6, #0]
 8005486:	6825      	ldr	r5, [r4, #0]
 8005488:	f015 0506 	ands.w	r5, r5, #6
 800548c:	d106      	bne.n	800549c <_printf_common+0x48>
 800548e:	f104 0a19 	add.w	sl, r4, #25
 8005492:	68e3      	ldr	r3, [r4, #12]
 8005494:	6832      	ldr	r2, [r6, #0]
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	42ab      	cmp	r3, r5
 800549a:	dc26      	bgt.n	80054ea <_printf_common+0x96>
 800549c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054a0:	1e13      	subs	r3, r2, #0
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	bf18      	it	ne
 80054a6:	2301      	movne	r3, #1
 80054a8:	0692      	lsls	r2, r2, #26
 80054aa:	d42b      	bmi.n	8005504 <_printf_common+0xb0>
 80054ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b0:	4649      	mov	r1, r9
 80054b2:	4638      	mov	r0, r7
 80054b4:	47c0      	blx	r8
 80054b6:	3001      	adds	r0, #1
 80054b8:	d01e      	beq.n	80054f8 <_printf_common+0xa4>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	6922      	ldr	r2, [r4, #16]
 80054be:	f003 0306 	and.w	r3, r3, #6
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	bf02      	ittt	eq
 80054c6:	68e5      	ldreq	r5, [r4, #12]
 80054c8:	6833      	ldreq	r3, [r6, #0]
 80054ca:	1aed      	subeq	r5, r5, r3
 80054cc:	68a3      	ldr	r3, [r4, #8]
 80054ce:	bf0c      	ite	eq
 80054d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d4:	2500      	movne	r5, #0
 80054d6:	4293      	cmp	r3, r2
 80054d8:	bfc4      	itt	gt
 80054da:	1a9b      	subgt	r3, r3, r2
 80054dc:	18ed      	addgt	r5, r5, r3
 80054de:	2600      	movs	r6, #0
 80054e0:	341a      	adds	r4, #26
 80054e2:	42b5      	cmp	r5, r6
 80054e4:	d11a      	bne.n	800551c <_printf_common+0xc8>
 80054e6:	2000      	movs	r0, #0
 80054e8:	e008      	b.n	80054fc <_printf_common+0xa8>
 80054ea:	2301      	movs	r3, #1
 80054ec:	4652      	mov	r2, sl
 80054ee:	4649      	mov	r1, r9
 80054f0:	4638      	mov	r0, r7
 80054f2:	47c0      	blx	r8
 80054f4:	3001      	adds	r0, #1
 80054f6:	d103      	bne.n	8005500 <_printf_common+0xac>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005500:	3501      	adds	r5, #1
 8005502:	e7c6      	b.n	8005492 <_printf_common+0x3e>
 8005504:	18e1      	adds	r1, r4, r3
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	2030      	movs	r0, #48	; 0x30
 800550a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800550e:	4422      	add	r2, r4
 8005510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005518:	3302      	adds	r3, #2
 800551a:	e7c7      	b.n	80054ac <_printf_common+0x58>
 800551c:	2301      	movs	r3, #1
 800551e:	4622      	mov	r2, r4
 8005520:	4649      	mov	r1, r9
 8005522:	4638      	mov	r0, r7
 8005524:	47c0      	blx	r8
 8005526:	3001      	adds	r0, #1
 8005528:	d0e6      	beq.n	80054f8 <_printf_common+0xa4>
 800552a:	3601      	adds	r6, #1
 800552c:	e7d9      	b.n	80054e2 <_printf_common+0x8e>
	...

08005530 <_printf_i>:
 8005530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	7e0f      	ldrb	r7, [r1, #24]
 8005536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005538:	2f78      	cmp	r7, #120	; 0x78
 800553a:	4691      	mov	r9, r2
 800553c:	4680      	mov	r8, r0
 800553e:	460c      	mov	r4, r1
 8005540:	469a      	mov	sl, r3
 8005542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005546:	d807      	bhi.n	8005558 <_printf_i+0x28>
 8005548:	2f62      	cmp	r7, #98	; 0x62
 800554a:	d80a      	bhi.n	8005562 <_printf_i+0x32>
 800554c:	2f00      	cmp	r7, #0
 800554e:	f000 80d4 	beq.w	80056fa <_printf_i+0x1ca>
 8005552:	2f58      	cmp	r7, #88	; 0x58
 8005554:	f000 80c0 	beq.w	80056d8 <_printf_i+0x1a8>
 8005558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800555c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005560:	e03a      	b.n	80055d8 <_printf_i+0xa8>
 8005562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005566:	2b15      	cmp	r3, #21
 8005568:	d8f6      	bhi.n	8005558 <_printf_i+0x28>
 800556a:	a101      	add	r1, pc, #4	; (adr r1, 8005570 <_printf_i+0x40>)
 800556c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005570:	080055c9 	.word	0x080055c9
 8005574:	080055dd 	.word	0x080055dd
 8005578:	08005559 	.word	0x08005559
 800557c:	08005559 	.word	0x08005559
 8005580:	08005559 	.word	0x08005559
 8005584:	08005559 	.word	0x08005559
 8005588:	080055dd 	.word	0x080055dd
 800558c:	08005559 	.word	0x08005559
 8005590:	08005559 	.word	0x08005559
 8005594:	08005559 	.word	0x08005559
 8005598:	08005559 	.word	0x08005559
 800559c:	080056e1 	.word	0x080056e1
 80055a0:	08005609 	.word	0x08005609
 80055a4:	0800569b 	.word	0x0800569b
 80055a8:	08005559 	.word	0x08005559
 80055ac:	08005559 	.word	0x08005559
 80055b0:	08005703 	.word	0x08005703
 80055b4:	08005559 	.word	0x08005559
 80055b8:	08005609 	.word	0x08005609
 80055bc:	08005559 	.word	0x08005559
 80055c0:	08005559 	.word	0x08005559
 80055c4:	080056a3 	.word	0x080056a3
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	1d1a      	adds	r2, r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	602a      	str	r2, [r5, #0]
 80055d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055d8:	2301      	movs	r3, #1
 80055da:	e09f      	b.n	800571c <_printf_i+0x1ec>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	682b      	ldr	r3, [r5, #0]
 80055e0:	0607      	lsls	r7, r0, #24
 80055e2:	f103 0104 	add.w	r1, r3, #4
 80055e6:	6029      	str	r1, [r5, #0]
 80055e8:	d501      	bpl.n	80055ee <_printf_i+0xbe>
 80055ea:	681e      	ldr	r6, [r3, #0]
 80055ec:	e003      	b.n	80055f6 <_printf_i+0xc6>
 80055ee:	0646      	lsls	r6, r0, #25
 80055f0:	d5fb      	bpl.n	80055ea <_printf_i+0xba>
 80055f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	da03      	bge.n	8005602 <_printf_i+0xd2>
 80055fa:	232d      	movs	r3, #45	; 0x2d
 80055fc:	4276      	negs	r6, r6
 80055fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005602:	485a      	ldr	r0, [pc, #360]	; (800576c <_printf_i+0x23c>)
 8005604:	230a      	movs	r3, #10
 8005606:	e012      	b.n	800562e <_printf_i+0xfe>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	1d19      	adds	r1, r3, #4
 800560e:	6029      	str	r1, [r5, #0]
 8005610:	0605      	lsls	r5, r0, #24
 8005612:	d501      	bpl.n	8005618 <_printf_i+0xe8>
 8005614:	681e      	ldr	r6, [r3, #0]
 8005616:	e002      	b.n	800561e <_printf_i+0xee>
 8005618:	0641      	lsls	r1, r0, #25
 800561a:	d5fb      	bpl.n	8005614 <_printf_i+0xe4>
 800561c:	881e      	ldrh	r6, [r3, #0]
 800561e:	4853      	ldr	r0, [pc, #332]	; (800576c <_printf_i+0x23c>)
 8005620:	2f6f      	cmp	r7, #111	; 0x6f
 8005622:	bf0c      	ite	eq
 8005624:	2308      	moveq	r3, #8
 8005626:	230a      	movne	r3, #10
 8005628:	2100      	movs	r1, #0
 800562a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800562e:	6865      	ldr	r5, [r4, #4]
 8005630:	60a5      	str	r5, [r4, #8]
 8005632:	2d00      	cmp	r5, #0
 8005634:	bfa2      	ittt	ge
 8005636:	6821      	ldrge	r1, [r4, #0]
 8005638:	f021 0104 	bicge.w	r1, r1, #4
 800563c:	6021      	strge	r1, [r4, #0]
 800563e:	b90e      	cbnz	r6, 8005644 <_printf_i+0x114>
 8005640:	2d00      	cmp	r5, #0
 8005642:	d04b      	beq.n	80056dc <_printf_i+0x1ac>
 8005644:	4615      	mov	r5, r2
 8005646:	fbb6 f1f3 	udiv	r1, r6, r3
 800564a:	fb03 6711 	mls	r7, r3, r1, r6
 800564e:	5dc7      	ldrb	r7, [r0, r7]
 8005650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005654:	4637      	mov	r7, r6
 8005656:	42bb      	cmp	r3, r7
 8005658:	460e      	mov	r6, r1
 800565a:	d9f4      	bls.n	8005646 <_printf_i+0x116>
 800565c:	2b08      	cmp	r3, #8
 800565e:	d10b      	bne.n	8005678 <_printf_i+0x148>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	07de      	lsls	r6, r3, #31
 8005664:	d508      	bpl.n	8005678 <_printf_i+0x148>
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	6861      	ldr	r1, [r4, #4]
 800566a:	4299      	cmp	r1, r3
 800566c:	bfde      	ittt	le
 800566e:	2330      	movle	r3, #48	; 0x30
 8005670:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005674:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005678:	1b52      	subs	r2, r2, r5
 800567a:	6122      	str	r2, [r4, #16]
 800567c:	f8cd a000 	str.w	sl, [sp]
 8005680:	464b      	mov	r3, r9
 8005682:	aa03      	add	r2, sp, #12
 8005684:	4621      	mov	r1, r4
 8005686:	4640      	mov	r0, r8
 8005688:	f7ff fee4 	bl	8005454 <_printf_common>
 800568c:	3001      	adds	r0, #1
 800568e:	d14a      	bne.n	8005726 <_printf_i+0x1f6>
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	b004      	add	sp, #16
 8005696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f043 0320 	orr.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	4833      	ldr	r0, [pc, #204]	; (8005770 <_printf_i+0x240>)
 80056a4:	2778      	movs	r7, #120	; 0x78
 80056a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	6829      	ldr	r1, [r5, #0]
 80056ae:	061f      	lsls	r7, r3, #24
 80056b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80056b4:	d402      	bmi.n	80056bc <_printf_i+0x18c>
 80056b6:	065f      	lsls	r7, r3, #25
 80056b8:	bf48      	it	mi
 80056ba:	b2b6      	uxthmi	r6, r6
 80056bc:	07df      	lsls	r7, r3, #31
 80056be:	bf48      	it	mi
 80056c0:	f043 0320 	orrmi.w	r3, r3, #32
 80056c4:	6029      	str	r1, [r5, #0]
 80056c6:	bf48      	it	mi
 80056c8:	6023      	strmi	r3, [r4, #0]
 80056ca:	b91e      	cbnz	r6, 80056d4 <_printf_i+0x1a4>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	f023 0320 	bic.w	r3, r3, #32
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	2310      	movs	r3, #16
 80056d6:	e7a7      	b.n	8005628 <_printf_i+0xf8>
 80056d8:	4824      	ldr	r0, [pc, #144]	; (800576c <_printf_i+0x23c>)
 80056da:	e7e4      	b.n	80056a6 <_printf_i+0x176>
 80056dc:	4615      	mov	r5, r2
 80056de:	e7bd      	b.n	800565c <_printf_i+0x12c>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	6826      	ldr	r6, [r4, #0]
 80056e4:	6961      	ldr	r1, [r4, #20]
 80056e6:	1d18      	adds	r0, r3, #4
 80056e8:	6028      	str	r0, [r5, #0]
 80056ea:	0635      	lsls	r5, r6, #24
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	d501      	bpl.n	80056f4 <_printf_i+0x1c4>
 80056f0:	6019      	str	r1, [r3, #0]
 80056f2:	e002      	b.n	80056fa <_printf_i+0x1ca>
 80056f4:	0670      	lsls	r0, r6, #25
 80056f6:	d5fb      	bpl.n	80056f0 <_printf_i+0x1c0>
 80056f8:	8019      	strh	r1, [r3, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	4615      	mov	r5, r2
 8005700:	e7bc      	b.n	800567c <_printf_i+0x14c>
 8005702:	682b      	ldr	r3, [r5, #0]
 8005704:	1d1a      	adds	r2, r3, #4
 8005706:	602a      	str	r2, [r5, #0]
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	6862      	ldr	r2, [r4, #4]
 800570c:	2100      	movs	r1, #0
 800570e:	4628      	mov	r0, r5
 8005710:	f7fa fd5e 	bl	80001d0 <memchr>
 8005714:	b108      	cbz	r0, 800571a <_printf_i+0x1ea>
 8005716:	1b40      	subs	r0, r0, r5
 8005718:	6060      	str	r0, [r4, #4]
 800571a:	6863      	ldr	r3, [r4, #4]
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	2300      	movs	r3, #0
 8005720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005724:	e7aa      	b.n	800567c <_printf_i+0x14c>
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	462a      	mov	r2, r5
 800572a:	4649      	mov	r1, r9
 800572c:	4640      	mov	r0, r8
 800572e:	47d0      	blx	sl
 8005730:	3001      	adds	r0, #1
 8005732:	d0ad      	beq.n	8005690 <_printf_i+0x160>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	079b      	lsls	r3, r3, #30
 8005738:	d413      	bmi.n	8005762 <_printf_i+0x232>
 800573a:	68e0      	ldr	r0, [r4, #12]
 800573c:	9b03      	ldr	r3, [sp, #12]
 800573e:	4298      	cmp	r0, r3
 8005740:	bfb8      	it	lt
 8005742:	4618      	movlt	r0, r3
 8005744:	e7a6      	b.n	8005694 <_printf_i+0x164>
 8005746:	2301      	movs	r3, #1
 8005748:	4632      	mov	r2, r6
 800574a:	4649      	mov	r1, r9
 800574c:	4640      	mov	r0, r8
 800574e:	47d0      	blx	sl
 8005750:	3001      	adds	r0, #1
 8005752:	d09d      	beq.n	8005690 <_printf_i+0x160>
 8005754:	3501      	adds	r5, #1
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	9903      	ldr	r1, [sp, #12]
 800575a:	1a5b      	subs	r3, r3, r1
 800575c:	42ab      	cmp	r3, r5
 800575e:	dcf2      	bgt.n	8005746 <_printf_i+0x216>
 8005760:	e7eb      	b.n	800573a <_printf_i+0x20a>
 8005762:	2500      	movs	r5, #0
 8005764:	f104 0619 	add.w	r6, r4, #25
 8005768:	e7f5      	b.n	8005756 <_printf_i+0x226>
 800576a:	bf00      	nop
 800576c:	08006078 	.word	0x08006078
 8005770:	08006089 	.word	0x08006089

08005774 <__sflush_r>:
 8005774:	898a      	ldrh	r2, [r1, #12]
 8005776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577a:	4605      	mov	r5, r0
 800577c:	0710      	lsls	r0, r2, #28
 800577e:	460c      	mov	r4, r1
 8005780:	d458      	bmi.n	8005834 <__sflush_r+0xc0>
 8005782:	684b      	ldr	r3, [r1, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	dc05      	bgt.n	8005794 <__sflush_r+0x20>
 8005788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	dc02      	bgt.n	8005794 <__sflush_r+0x20>
 800578e:	2000      	movs	r0, #0
 8005790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005796:	2e00      	cmp	r6, #0
 8005798:	d0f9      	beq.n	800578e <__sflush_r+0x1a>
 800579a:	2300      	movs	r3, #0
 800579c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057a0:	682f      	ldr	r7, [r5, #0]
 80057a2:	6a21      	ldr	r1, [r4, #32]
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	d032      	beq.n	800580e <__sflush_r+0x9a>
 80057a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	075a      	lsls	r2, r3, #29
 80057ae:	d505      	bpl.n	80057bc <__sflush_r+0x48>
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	1ac0      	subs	r0, r0, r3
 80057b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057b6:	b10b      	cbz	r3, 80057bc <__sflush_r+0x48>
 80057b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ba:	1ac0      	subs	r0, r0, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	4602      	mov	r2, r0
 80057c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057c2:	6a21      	ldr	r1, [r4, #32]
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b0      	blx	r6
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	d106      	bne.n	80057dc <__sflush_r+0x68>
 80057ce:	6829      	ldr	r1, [r5, #0]
 80057d0:	291d      	cmp	r1, #29
 80057d2:	d82b      	bhi.n	800582c <__sflush_r+0xb8>
 80057d4:	4a29      	ldr	r2, [pc, #164]	; (800587c <__sflush_r+0x108>)
 80057d6:	410a      	asrs	r2, r1
 80057d8:	07d6      	lsls	r6, r2, #31
 80057da:	d427      	bmi.n	800582c <__sflush_r+0xb8>
 80057dc:	2200      	movs	r2, #0
 80057de:	6062      	str	r2, [r4, #4]
 80057e0:	04d9      	lsls	r1, r3, #19
 80057e2:	6922      	ldr	r2, [r4, #16]
 80057e4:	6022      	str	r2, [r4, #0]
 80057e6:	d504      	bpl.n	80057f2 <__sflush_r+0x7e>
 80057e8:	1c42      	adds	r2, r0, #1
 80057ea:	d101      	bne.n	80057f0 <__sflush_r+0x7c>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b903      	cbnz	r3, 80057f2 <__sflush_r+0x7e>
 80057f0:	6560      	str	r0, [r4, #84]	; 0x54
 80057f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057f4:	602f      	str	r7, [r5, #0]
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d0c9      	beq.n	800578e <__sflush_r+0x1a>
 80057fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057fe:	4299      	cmp	r1, r3
 8005800:	d002      	beq.n	8005808 <__sflush_r+0x94>
 8005802:	4628      	mov	r0, r5
 8005804:	f7ff fbce 	bl	8004fa4 <_free_r>
 8005808:	2000      	movs	r0, #0
 800580a:	6360      	str	r0, [r4, #52]	; 0x34
 800580c:	e7c0      	b.n	8005790 <__sflush_r+0x1c>
 800580e:	2301      	movs	r3, #1
 8005810:	4628      	mov	r0, r5
 8005812:	47b0      	blx	r6
 8005814:	1c41      	adds	r1, r0, #1
 8005816:	d1c8      	bne.n	80057aa <__sflush_r+0x36>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0c5      	beq.n	80057aa <__sflush_r+0x36>
 800581e:	2b1d      	cmp	r3, #29
 8005820:	d001      	beq.n	8005826 <__sflush_r+0xb2>
 8005822:	2b16      	cmp	r3, #22
 8005824:	d101      	bne.n	800582a <__sflush_r+0xb6>
 8005826:	602f      	str	r7, [r5, #0]
 8005828:	e7b1      	b.n	800578e <__sflush_r+0x1a>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	e7ad      	b.n	8005790 <__sflush_r+0x1c>
 8005834:	690f      	ldr	r7, [r1, #16]
 8005836:	2f00      	cmp	r7, #0
 8005838:	d0a9      	beq.n	800578e <__sflush_r+0x1a>
 800583a:	0793      	lsls	r3, r2, #30
 800583c:	680e      	ldr	r6, [r1, #0]
 800583e:	bf08      	it	eq
 8005840:	694b      	ldreq	r3, [r1, #20]
 8005842:	600f      	str	r7, [r1, #0]
 8005844:	bf18      	it	ne
 8005846:	2300      	movne	r3, #0
 8005848:	eba6 0807 	sub.w	r8, r6, r7
 800584c:	608b      	str	r3, [r1, #8]
 800584e:	f1b8 0f00 	cmp.w	r8, #0
 8005852:	dd9c      	ble.n	800578e <__sflush_r+0x1a>
 8005854:	6a21      	ldr	r1, [r4, #32]
 8005856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005858:	4643      	mov	r3, r8
 800585a:	463a      	mov	r2, r7
 800585c:	4628      	mov	r0, r5
 800585e:	47b0      	blx	r6
 8005860:	2800      	cmp	r0, #0
 8005862:	dc06      	bgt.n	8005872 <__sflush_r+0xfe>
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e78e      	b.n	8005790 <__sflush_r+0x1c>
 8005872:	4407      	add	r7, r0
 8005874:	eba8 0800 	sub.w	r8, r8, r0
 8005878:	e7e9      	b.n	800584e <__sflush_r+0xda>
 800587a:	bf00      	nop
 800587c:	dfbffffe 	.word	0xdfbffffe

08005880 <_fflush_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	690b      	ldr	r3, [r1, #16]
 8005884:	4605      	mov	r5, r0
 8005886:	460c      	mov	r4, r1
 8005888:	b913      	cbnz	r3, 8005890 <_fflush_r+0x10>
 800588a:	2500      	movs	r5, #0
 800588c:	4628      	mov	r0, r5
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	b118      	cbz	r0, 800589a <_fflush_r+0x1a>
 8005892:	6a03      	ldr	r3, [r0, #32]
 8005894:	b90b      	cbnz	r3, 800589a <_fflush_r+0x1a>
 8005896:	f7ff fa51 	bl	8004d3c <__sinit>
 800589a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f3      	beq.n	800588a <_fflush_r+0xa>
 80058a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058a4:	07d0      	lsls	r0, r2, #31
 80058a6:	d404      	bmi.n	80058b2 <_fflush_r+0x32>
 80058a8:	0599      	lsls	r1, r3, #22
 80058aa:	d402      	bmi.n	80058b2 <_fflush_r+0x32>
 80058ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ae:	f7ff fb58 	bl	8004f62 <__retarget_lock_acquire_recursive>
 80058b2:	4628      	mov	r0, r5
 80058b4:	4621      	mov	r1, r4
 80058b6:	f7ff ff5d 	bl	8005774 <__sflush_r>
 80058ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058bc:	07da      	lsls	r2, r3, #31
 80058be:	4605      	mov	r5, r0
 80058c0:	d4e4      	bmi.n	800588c <_fflush_r+0xc>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	059b      	lsls	r3, r3, #22
 80058c6:	d4e1      	bmi.n	800588c <_fflush_r+0xc>
 80058c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ca:	f7ff fb4b 	bl	8004f64 <__retarget_lock_release_recursive>
 80058ce:	e7dd      	b.n	800588c <_fflush_r+0xc>

080058d0 <fiprintf>:
 80058d0:	b40e      	push	{r1, r2, r3}
 80058d2:	b503      	push	{r0, r1, lr}
 80058d4:	4601      	mov	r1, r0
 80058d6:	ab03      	add	r3, sp, #12
 80058d8:	4805      	ldr	r0, [pc, #20]	; (80058f0 <fiprintf+0x20>)
 80058da:	f853 2b04 	ldr.w	r2, [r3], #4
 80058de:	6800      	ldr	r0, [r0, #0]
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	f000 f89f 	bl	8005a24 <_vfiprintf_r>
 80058e6:	b002      	add	sp, #8
 80058e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058ec:	b003      	add	sp, #12
 80058ee:	4770      	bx	lr
 80058f0:	20000064 	.word	0x20000064

080058f4 <memmove>:
 80058f4:	4288      	cmp	r0, r1
 80058f6:	b510      	push	{r4, lr}
 80058f8:	eb01 0402 	add.w	r4, r1, r2
 80058fc:	d902      	bls.n	8005904 <memmove+0x10>
 80058fe:	4284      	cmp	r4, r0
 8005900:	4623      	mov	r3, r4
 8005902:	d807      	bhi.n	8005914 <memmove+0x20>
 8005904:	1e43      	subs	r3, r0, #1
 8005906:	42a1      	cmp	r1, r4
 8005908:	d008      	beq.n	800591c <memmove+0x28>
 800590a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800590e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005912:	e7f8      	b.n	8005906 <memmove+0x12>
 8005914:	4402      	add	r2, r0
 8005916:	4601      	mov	r1, r0
 8005918:	428a      	cmp	r2, r1
 800591a:	d100      	bne.n	800591e <memmove+0x2a>
 800591c:	bd10      	pop	{r4, pc}
 800591e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005926:	e7f7      	b.n	8005918 <memmove+0x24>

08005928 <_sbrk_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_sbrk_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb fe38 	bl	80015a8 <_sbrk>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_sbrk_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_sbrk_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	200003d8 	.word	0x200003d8

08005948 <memcpy>:
 8005948:	440a      	add	r2, r1
 800594a:	4291      	cmp	r1, r2
 800594c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005950:	d100      	bne.n	8005954 <memcpy+0xc>
 8005952:	4770      	bx	lr
 8005954:	b510      	push	{r4, lr}
 8005956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800595a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800595e:	4291      	cmp	r1, r2
 8005960:	d1f9      	bne.n	8005956 <memcpy+0xe>
 8005962:	bd10      	pop	{r4, pc}

08005964 <abort>:
 8005964:	b508      	push	{r3, lr}
 8005966:	2006      	movs	r0, #6
 8005968:	f000 fa34 	bl	8005dd4 <raise>
 800596c:	2001      	movs	r0, #1
 800596e:	f7fb fda3 	bl	80014b8 <_exit>

08005972 <_realloc_r>:
 8005972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005976:	4680      	mov	r8, r0
 8005978:	4614      	mov	r4, r2
 800597a:	460e      	mov	r6, r1
 800597c:	b921      	cbnz	r1, 8005988 <_realloc_r+0x16>
 800597e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005982:	4611      	mov	r1, r2
 8005984:	f7ff bb82 	b.w	800508c <_malloc_r>
 8005988:	b92a      	cbnz	r2, 8005996 <_realloc_r+0x24>
 800598a:	f7ff fb0b 	bl	8004fa4 <_free_r>
 800598e:	4625      	mov	r5, r4
 8005990:	4628      	mov	r0, r5
 8005992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005996:	f000 fa39 	bl	8005e0c <_malloc_usable_size_r>
 800599a:	4284      	cmp	r4, r0
 800599c:	4607      	mov	r7, r0
 800599e:	d802      	bhi.n	80059a6 <_realloc_r+0x34>
 80059a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059a4:	d812      	bhi.n	80059cc <_realloc_r+0x5a>
 80059a6:	4621      	mov	r1, r4
 80059a8:	4640      	mov	r0, r8
 80059aa:	f7ff fb6f 	bl	800508c <_malloc_r>
 80059ae:	4605      	mov	r5, r0
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0ed      	beq.n	8005990 <_realloc_r+0x1e>
 80059b4:	42bc      	cmp	r4, r7
 80059b6:	4622      	mov	r2, r4
 80059b8:	4631      	mov	r1, r6
 80059ba:	bf28      	it	cs
 80059bc:	463a      	movcs	r2, r7
 80059be:	f7ff ffc3 	bl	8005948 <memcpy>
 80059c2:	4631      	mov	r1, r6
 80059c4:	4640      	mov	r0, r8
 80059c6:	f7ff faed 	bl	8004fa4 <_free_r>
 80059ca:	e7e1      	b.n	8005990 <_realloc_r+0x1e>
 80059cc:	4635      	mov	r5, r6
 80059ce:	e7df      	b.n	8005990 <_realloc_r+0x1e>

080059d0 <__sfputc_r>:
 80059d0:	6893      	ldr	r3, [r2, #8]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	b410      	push	{r4}
 80059d8:	6093      	str	r3, [r2, #8]
 80059da:	da08      	bge.n	80059ee <__sfputc_r+0x1e>
 80059dc:	6994      	ldr	r4, [r2, #24]
 80059de:	42a3      	cmp	r3, r4
 80059e0:	db01      	blt.n	80059e6 <__sfputc_r+0x16>
 80059e2:	290a      	cmp	r1, #10
 80059e4:	d103      	bne.n	80059ee <__sfputc_r+0x1e>
 80059e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ea:	f000 b935 	b.w	8005c58 <__swbuf_r>
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	1c58      	adds	r0, r3, #1
 80059f2:	6010      	str	r0, [r2, #0]
 80059f4:	7019      	strb	r1, [r3, #0]
 80059f6:	4608      	mov	r0, r1
 80059f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <__sfputs_r>:
 80059fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a00:	4606      	mov	r6, r0
 8005a02:	460f      	mov	r7, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	18d5      	adds	r5, r2, r3
 8005a08:	42ac      	cmp	r4, r5
 8005a0a:	d101      	bne.n	8005a10 <__sfputs_r+0x12>
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e007      	b.n	8005a20 <__sfputs_r+0x22>
 8005a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a14:	463a      	mov	r2, r7
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7ff ffda 	bl	80059d0 <__sfputc_r>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d1f3      	bne.n	8005a08 <__sfputs_r+0xa>
 8005a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a24 <_vfiprintf_r>:
 8005a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	460d      	mov	r5, r1
 8005a2a:	b09d      	sub	sp, #116	; 0x74
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	4698      	mov	r8, r3
 8005a30:	4606      	mov	r6, r0
 8005a32:	b118      	cbz	r0, 8005a3c <_vfiprintf_r+0x18>
 8005a34:	6a03      	ldr	r3, [r0, #32]
 8005a36:	b90b      	cbnz	r3, 8005a3c <_vfiprintf_r+0x18>
 8005a38:	f7ff f980 	bl	8004d3c <__sinit>
 8005a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	d405      	bmi.n	8005a4e <_vfiprintf_r+0x2a>
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	059a      	lsls	r2, r3, #22
 8005a46:	d402      	bmi.n	8005a4e <_vfiprintf_r+0x2a>
 8005a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4a:	f7ff fa8a 	bl	8004f62 <__retarget_lock_acquire_recursive>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	071b      	lsls	r3, r3, #28
 8005a52:	d501      	bpl.n	8005a58 <_vfiprintf_r+0x34>
 8005a54:	692b      	ldr	r3, [r5, #16]
 8005a56:	b99b      	cbnz	r3, 8005a80 <_vfiprintf_r+0x5c>
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f000 f93a 	bl	8005cd4 <__swsetup_r>
 8005a60:	b170      	cbz	r0, 8005a80 <_vfiprintf_r+0x5c>
 8005a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a64:	07dc      	lsls	r4, r3, #31
 8005a66:	d504      	bpl.n	8005a72 <_vfiprintf_r+0x4e>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	b01d      	add	sp, #116	; 0x74
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	0598      	lsls	r0, r3, #22
 8005a76:	d4f7      	bmi.n	8005a68 <_vfiprintf_r+0x44>
 8005a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7a:	f7ff fa73 	bl	8004f64 <__retarget_lock_release_recursive>
 8005a7e:	e7f3      	b.n	8005a68 <_vfiprintf_r+0x44>
 8005a80:	2300      	movs	r3, #0
 8005a82:	9309      	str	r3, [sp, #36]	; 0x24
 8005a84:	2320      	movs	r3, #32
 8005a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a8e:	2330      	movs	r3, #48	; 0x30
 8005a90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c44 <_vfiprintf_r+0x220>
 8005a94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a98:	f04f 0901 	mov.w	r9, #1
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	469a      	mov	sl, r3
 8005aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aa4:	b10a      	cbz	r2, 8005aaa <_vfiprintf_r+0x86>
 8005aa6:	2a25      	cmp	r2, #37	; 0x25
 8005aa8:	d1f9      	bne.n	8005a9e <_vfiprintf_r+0x7a>
 8005aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8005aae:	d00b      	beq.n	8005ac8 <_vfiprintf_r+0xa4>
 8005ab0:	465b      	mov	r3, fp
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f7ff ffa1 	bl	80059fe <__sfputs_r>
 8005abc:	3001      	adds	r0, #1
 8005abe:	f000 80a9 	beq.w	8005c14 <_vfiprintf_r+0x1f0>
 8005ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac4:	445a      	add	r2, fp
 8005ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80a1 	beq.w	8005c14 <_vfiprintf_r+0x1f0>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005adc:	f10a 0a01 	add.w	sl, sl, #1
 8005ae0:	9304      	str	r3, [sp, #16]
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8005aea:	4654      	mov	r4, sl
 8005aec:	2205      	movs	r2, #5
 8005aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af2:	4854      	ldr	r0, [pc, #336]	; (8005c44 <_vfiprintf_r+0x220>)
 8005af4:	f7fa fb6c 	bl	80001d0 <memchr>
 8005af8:	9a04      	ldr	r2, [sp, #16]
 8005afa:	b9d8      	cbnz	r0, 8005b34 <_vfiprintf_r+0x110>
 8005afc:	06d1      	lsls	r1, r2, #27
 8005afe:	bf44      	itt	mi
 8005b00:	2320      	movmi	r3, #32
 8005b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b06:	0713      	lsls	r3, r2, #28
 8005b08:	bf44      	itt	mi
 8005b0a:	232b      	movmi	r3, #43	; 0x2b
 8005b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b10:	f89a 3000 	ldrb.w	r3, [sl]
 8005b14:	2b2a      	cmp	r3, #42	; 0x2a
 8005b16:	d015      	beq.n	8005b44 <_vfiprintf_r+0x120>
 8005b18:	9a07      	ldr	r2, [sp, #28]
 8005b1a:	4654      	mov	r4, sl
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f04f 0c0a 	mov.w	ip, #10
 8005b22:	4621      	mov	r1, r4
 8005b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b28:	3b30      	subs	r3, #48	; 0x30
 8005b2a:	2b09      	cmp	r3, #9
 8005b2c:	d94d      	bls.n	8005bca <_vfiprintf_r+0x1a6>
 8005b2e:	b1b0      	cbz	r0, 8005b5e <_vfiprintf_r+0x13a>
 8005b30:	9207      	str	r2, [sp, #28]
 8005b32:	e014      	b.n	8005b5e <_vfiprintf_r+0x13a>
 8005b34:	eba0 0308 	sub.w	r3, r0, r8
 8005b38:	fa09 f303 	lsl.w	r3, r9, r3
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	9304      	str	r3, [sp, #16]
 8005b40:	46a2      	mov	sl, r4
 8005b42:	e7d2      	b.n	8005aea <_vfiprintf_r+0xc6>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	1d19      	adds	r1, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	9103      	str	r1, [sp, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bfbb      	ittet	lt
 8005b50:	425b      	neglt	r3, r3
 8005b52:	f042 0202 	orrlt.w	r2, r2, #2
 8005b56:	9307      	strge	r3, [sp, #28]
 8005b58:	9307      	strlt	r3, [sp, #28]
 8005b5a:	bfb8      	it	lt
 8005b5c:	9204      	strlt	r2, [sp, #16]
 8005b5e:	7823      	ldrb	r3, [r4, #0]
 8005b60:	2b2e      	cmp	r3, #46	; 0x2e
 8005b62:	d10c      	bne.n	8005b7e <_vfiprintf_r+0x15a>
 8005b64:	7863      	ldrb	r3, [r4, #1]
 8005b66:	2b2a      	cmp	r3, #42	; 0x2a
 8005b68:	d134      	bne.n	8005bd4 <_vfiprintf_r+0x1b0>
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	1d1a      	adds	r2, r3, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	9203      	str	r2, [sp, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bfb8      	it	lt
 8005b76:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b7a:	3402      	adds	r4, #2
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c54 <_vfiprintf_r+0x230>
 8005b82:	7821      	ldrb	r1, [r4, #0]
 8005b84:	2203      	movs	r2, #3
 8005b86:	4650      	mov	r0, sl
 8005b88:	f7fa fb22 	bl	80001d0 <memchr>
 8005b8c:	b138      	cbz	r0, 8005b9e <_vfiprintf_r+0x17a>
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	eba0 000a 	sub.w	r0, r0, sl
 8005b94:	2240      	movs	r2, #64	; 0x40
 8005b96:	4082      	lsls	r2, r0
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	3401      	adds	r4, #1
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba2:	4829      	ldr	r0, [pc, #164]	; (8005c48 <_vfiprintf_r+0x224>)
 8005ba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ba8:	2206      	movs	r2, #6
 8005baa:	f7fa fb11 	bl	80001d0 <memchr>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d03f      	beq.n	8005c32 <_vfiprintf_r+0x20e>
 8005bb2:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <_vfiprintf_r+0x228>)
 8005bb4:	bb1b      	cbnz	r3, 8005bfe <_vfiprintf_r+0x1da>
 8005bb6:	9b03      	ldr	r3, [sp, #12]
 8005bb8:	3307      	adds	r3, #7
 8005bba:	f023 0307 	bic.w	r3, r3, #7
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	9303      	str	r3, [sp, #12]
 8005bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc4:	443b      	add	r3, r7
 8005bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc8:	e768      	b.n	8005a9c <_vfiprintf_r+0x78>
 8005bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bce:	460c      	mov	r4, r1
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	e7a6      	b.n	8005b22 <_vfiprintf_r+0xfe>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	3401      	adds	r4, #1
 8005bd8:	9305      	str	r3, [sp, #20]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f04f 0c0a 	mov.w	ip, #10
 8005be0:	4620      	mov	r0, r4
 8005be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005be6:	3a30      	subs	r2, #48	; 0x30
 8005be8:	2a09      	cmp	r2, #9
 8005bea:	d903      	bls.n	8005bf4 <_vfiprintf_r+0x1d0>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0c6      	beq.n	8005b7e <_vfiprintf_r+0x15a>
 8005bf0:	9105      	str	r1, [sp, #20]
 8005bf2:	e7c4      	b.n	8005b7e <_vfiprintf_r+0x15a>
 8005bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e7f0      	b.n	8005be0 <_vfiprintf_r+0x1bc>
 8005bfe:	ab03      	add	r3, sp, #12
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	462a      	mov	r2, r5
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <_vfiprintf_r+0x22c>)
 8005c06:	a904      	add	r1, sp, #16
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f3af 8000 	nop.w
 8005c0e:	4607      	mov	r7, r0
 8005c10:	1c78      	adds	r0, r7, #1
 8005c12:	d1d6      	bne.n	8005bc2 <_vfiprintf_r+0x19e>
 8005c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	d405      	bmi.n	8005c26 <_vfiprintf_r+0x202>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	059a      	lsls	r2, r3, #22
 8005c1e:	d402      	bmi.n	8005c26 <_vfiprintf_r+0x202>
 8005c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c22:	f7ff f99f 	bl	8004f64 <__retarget_lock_release_recursive>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	065b      	lsls	r3, r3, #25
 8005c2a:	f53f af1d 	bmi.w	8005a68 <_vfiprintf_r+0x44>
 8005c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c30:	e71c      	b.n	8005a6c <_vfiprintf_r+0x48>
 8005c32:	ab03      	add	r3, sp, #12
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	462a      	mov	r2, r5
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <_vfiprintf_r+0x22c>)
 8005c3a:	a904      	add	r1, sp, #16
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7ff fc77 	bl	8005530 <_printf_i>
 8005c42:	e7e4      	b.n	8005c0e <_vfiprintf_r+0x1ea>
 8005c44:	08006067 	.word	0x08006067
 8005c48:	08006071 	.word	0x08006071
 8005c4c:	00000000 	.word	0x00000000
 8005c50:	080059ff 	.word	0x080059ff
 8005c54:	0800606d 	.word	0x0800606d

08005c58 <__swbuf_r>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	460e      	mov	r6, r1
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	4605      	mov	r5, r0
 8005c60:	b118      	cbz	r0, 8005c6a <__swbuf_r+0x12>
 8005c62:	6a03      	ldr	r3, [r0, #32]
 8005c64:	b90b      	cbnz	r3, 8005c6a <__swbuf_r+0x12>
 8005c66:	f7ff f869 	bl	8004d3c <__sinit>
 8005c6a:	69a3      	ldr	r3, [r4, #24]
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	071a      	lsls	r2, r3, #28
 8005c72:	d525      	bpl.n	8005cc0 <__swbuf_r+0x68>
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	b31b      	cbz	r3, 8005cc0 <__swbuf_r+0x68>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	6922      	ldr	r2, [r4, #16]
 8005c7c:	1a98      	subs	r0, r3, r2
 8005c7e:	6963      	ldr	r3, [r4, #20]
 8005c80:	b2f6      	uxtb	r6, r6
 8005c82:	4283      	cmp	r3, r0
 8005c84:	4637      	mov	r7, r6
 8005c86:	dc04      	bgt.n	8005c92 <__swbuf_r+0x3a>
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7ff fdf8 	bl	8005880 <_fflush_r>
 8005c90:	b9e0      	cbnz	r0, 8005ccc <__swbuf_r+0x74>
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	6022      	str	r2, [r4, #0]
 8005c9e:	701e      	strb	r6, [r3, #0]
 8005ca0:	6962      	ldr	r2, [r4, #20]
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d004      	beq.n	8005cb2 <__swbuf_r+0x5a>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	07db      	lsls	r3, r3, #31
 8005cac:	d506      	bpl.n	8005cbc <__swbuf_r+0x64>
 8005cae:	2e0a      	cmp	r6, #10
 8005cb0:	d104      	bne.n	8005cbc <__swbuf_r+0x64>
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f7ff fde3 	bl	8005880 <_fflush_r>
 8005cba:	b938      	cbnz	r0, 8005ccc <__swbuf_r+0x74>
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 f806 	bl	8005cd4 <__swsetup_r>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d0d5      	beq.n	8005c78 <__swbuf_r+0x20>
 8005ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8005cd0:	e7f4      	b.n	8005cbc <__swbuf_r+0x64>
	...

08005cd4 <__swsetup_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4b2a      	ldr	r3, [pc, #168]	; (8005d80 <__swsetup_r+0xac>)
 8005cd8:	4605      	mov	r5, r0
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	460c      	mov	r4, r1
 8005cde:	b118      	cbz	r0, 8005ce8 <__swsetup_r+0x14>
 8005ce0:	6a03      	ldr	r3, [r0, #32]
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <__swsetup_r+0x14>
 8005ce4:	f7ff f82a 	bl	8004d3c <__sinit>
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cee:	0718      	lsls	r0, r3, #28
 8005cf0:	d422      	bmi.n	8005d38 <__swsetup_r+0x64>
 8005cf2:	06d9      	lsls	r1, r3, #27
 8005cf4:	d407      	bmi.n	8005d06 <__swsetup_r+0x32>
 8005cf6:	2309      	movs	r3, #9
 8005cf8:	602b      	str	r3, [r5, #0]
 8005cfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e034      	b.n	8005d70 <__swsetup_r+0x9c>
 8005d06:	0758      	lsls	r0, r3, #29
 8005d08:	d512      	bpl.n	8005d30 <__swsetup_r+0x5c>
 8005d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d0c:	b141      	cbz	r1, 8005d20 <__swsetup_r+0x4c>
 8005d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d12:	4299      	cmp	r1, r3
 8005d14:	d002      	beq.n	8005d1c <__swsetup_r+0x48>
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7ff f944 	bl	8004fa4 <_free_r>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6363      	str	r3, [r4, #52]	; 0x34
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f043 0308 	orr.w	r3, r3, #8
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	6923      	ldr	r3, [r4, #16]
 8005d3a:	b94b      	cbnz	r3, 8005d50 <__swsetup_r+0x7c>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d46:	d003      	beq.n	8005d50 <__swsetup_r+0x7c>
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f000 f88c 	bl	8005e68 <__smakebuf_r>
 8005d50:	89a0      	ldrh	r0, [r4, #12]
 8005d52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d56:	f010 0301 	ands.w	r3, r0, #1
 8005d5a:	d00a      	beq.n	8005d72 <__swsetup_r+0x9e>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60a3      	str	r3, [r4, #8]
 8005d60:	6963      	ldr	r3, [r4, #20]
 8005d62:	425b      	negs	r3, r3
 8005d64:	61a3      	str	r3, [r4, #24]
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	b943      	cbnz	r3, 8005d7c <__swsetup_r+0xa8>
 8005d6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d6e:	d1c4      	bne.n	8005cfa <__swsetup_r+0x26>
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	0781      	lsls	r1, r0, #30
 8005d74:	bf58      	it	pl
 8005d76:	6963      	ldrpl	r3, [r4, #20]
 8005d78:	60a3      	str	r3, [r4, #8]
 8005d7a:	e7f4      	b.n	8005d66 <__swsetup_r+0x92>
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e7f7      	b.n	8005d70 <__swsetup_r+0x9c>
 8005d80:	20000064 	.word	0x20000064

08005d84 <_raise_r>:
 8005d84:	291f      	cmp	r1, #31
 8005d86:	b538      	push	{r3, r4, r5, lr}
 8005d88:	4604      	mov	r4, r0
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	d904      	bls.n	8005d98 <_raise_r+0x14>
 8005d8e:	2316      	movs	r3, #22
 8005d90:	6003      	str	r3, [r0, #0]
 8005d92:	f04f 30ff 	mov.w	r0, #4294967295
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005d9a:	b112      	cbz	r2, 8005da2 <_raise_r+0x1e>
 8005d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005da0:	b94b      	cbnz	r3, 8005db6 <_raise_r+0x32>
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 f830 	bl	8005e08 <_getpid_r>
 8005da8:	462a      	mov	r2, r5
 8005daa:	4601      	mov	r1, r0
 8005dac:	4620      	mov	r0, r4
 8005dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005db2:	f000 b817 	b.w	8005de4 <_kill_r>
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d00a      	beq.n	8005dd0 <_raise_r+0x4c>
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	d103      	bne.n	8005dc6 <_raise_r+0x42>
 8005dbe:	2316      	movs	r3, #22
 8005dc0:	6003      	str	r3, [r0, #0]
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	e7e7      	b.n	8005d96 <_raise_r+0x12>
 8005dc6:	2400      	movs	r4, #0
 8005dc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dcc:	4628      	mov	r0, r5
 8005dce:	4798      	blx	r3
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e7e0      	b.n	8005d96 <_raise_r+0x12>

08005dd4 <raise>:
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <raise+0xc>)
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f7ff bfd3 	b.w	8005d84 <_raise_r>
 8005dde:	bf00      	nop
 8005de0:	20000064 	.word	0x20000064

08005de4 <_kill_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4d07      	ldr	r5, [pc, #28]	; (8005e04 <_kill_r+0x20>)
 8005de8:	2300      	movs	r3, #0
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	f7fb fb51 	bl	8001498 <_kill>
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	d102      	bne.n	8005e00 <_kill_r+0x1c>
 8005dfa:	682b      	ldr	r3, [r5, #0]
 8005dfc:	b103      	cbz	r3, 8005e00 <_kill_r+0x1c>
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	bd38      	pop	{r3, r4, r5, pc}
 8005e02:	bf00      	nop
 8005e04:	200003d8 	.word	0x200003d8

08005e08 <_getpid_r>:
 8005e08:	f7fb bb3e 	b.w	8001488 <_getpid>

08005e0c <_malloc_usable_size_r>:
 8005e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e10:	1f18      	subs	r0, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bfbc      	itt	lt
 8005e16:	580b      	ldrlt	r3, [r1, r0]
 8005e18:	18c0      	addlt	r0, r0, r3
 8005e1a:	4770      	bx	lr

08005e1c <__swhatbuf_r>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	460c      	mov	r4, r1
 8005e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e24:	2900      	cmp	r1, #0
 8005e26:	b096      	sub	sp, #88	; 0x58
 8005e28:	4615      	mov	r5, r2
 8005e2a:	461e      	mov	r6, r3
 8005e2c:	da0d      	bge.n	8005e4a <__swhatbuf_r+0x2e>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e34:	f04f 0100 	mov.w	r1, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e3e:	2340      	movne	r3, #64	; 0x40
 8005e40:	2000      	movs	r0, #0
 8005e42:	6031      	str	r1, [r6, #0]
 8005e44:	602b      	str	r3, [r5, #0]
 8005e46:	b016      	add	sp, #88	; 0x58
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
 8005e4a:	466a      	mov	r2, sp
 8005e4c:	f000 f848 	bl	8005ee0 <_fstat_r>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	dbec      	blt.n	8005e2e <__swhatbuf_r+0x12>
 8005e54:	9901      	ldr	r1, [sp, #4]
 8005e56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e5e:	4259      	negs	r1, r3
 8005e60:	4159      	adcs	r1, r3
 8005e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e66:	e7eb      	b.n	8005e40 <__swhatbuf_r+0x24>

08005e68 <__smakebuf_r>:
 8005e68:	898b      	ldrh	r3, [r1, #12]
 8005e6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e6c:	079d      	lsls	r5, r3, #30
 8005e6e:	4606      	mov	r6, r0
 8005e70:	460c      	mov	r4, r1
 8005e72:	d507      	bpl.n	8005e84 <__smakebuf_r+0x1c>
 8005e74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	6163      	str	r3, [r4, #20]
 8005e80:	b002      	add	sp, #8
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	ab01      	add	r3, sp, #4
 8005e86:	466a      	mov	r2, sp
 8005e88:	f7ff ffc8 	bl	8005e1c <__swhatbuf_r>
 8005e8c:	9900      	ldr	r1, [sp, #0]
 8005e8e:	4605      	mov	r5, r0
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7ff f8fb 	bl	800508c <_malloc_r>
 8005e96:	b948      	cbnz	r0, 8005eac <__smakebuf_r+0x44>
 8005e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9c:	059a      	lsls	r2, r3, #22
 8005e9e:	d4ef      	bmi.n	8005e80 <__smakebuf_r+0x18>
 8005ea0:	f023 0303 	bic.w	r3, r3, #3
 8005ea4:	f043 0302 	orr.w	r3, r3, #2
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	e7e3      	b.n	8005e74 <__smakebuf_r+0xc>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	6020      	str	r0, [r4, #0]
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	9b00      	ldr	r3, [sp, #0]
 8005eb8:	6163      	str	r3, [r4, #20]
 8005eba:	9b01      	ldr	r3, [sp, #4]
 8005ebc:	6120      	str	r0, [r4, #16]
 8005ebe:	b15b      	cbz	r3, 8005ed8 <__smakebuf_r+0x70>
 8005ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f000 f81d 	bl	8005f04 <_isatty_r>
 8005eca:	b128      	cbz	r0, 8005ed8 <__smakebuf_r+0x70>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	f023 0303 	bic.w	r3, r3, #3
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	81a3      	strh	r3, [r4, #12]
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	431d      	orrs	r5, r3
 8005edc:	81a5      	strh	r5, [r4, #12]
 8005ede:	e7cf      	b.n	8005e80 <__smakebuf_r+0x18>

08005ee0 <_fstat_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d07      	ldr	r5, [pc, #28]	; (8005f00 <_fstat_r+0x20>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	602b      	str	r3, [r5, #0]
 8005eee:	f7fb fb32 	bl	8001556 <_fstat>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	d102      	bne.n	8005efc <_fstat_r+0x1c>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	b103      	cbz	r3, 8005efc <_fstat_r+0x1c>
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
 8005efe:	bf00      	nop
 8005f00:	200003d8 	.word	0x200003d8

08005f04 <_isatty_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d06      	ldr	r5, [pc, #24]	; (8005f20 <_isatty_r+0x1c>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fb fb31 	bl	8001576 <_isatty>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_isatty_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_isatty_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	200003d8 	.word	0x200003d8

08005f24 <_init>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

08005f30 <_fini>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr
